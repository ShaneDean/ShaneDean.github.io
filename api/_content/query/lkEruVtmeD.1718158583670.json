{"_path":"/blog/otopi/analyze","_dir":"otopi","_draft":false,"_partial":false,"_locale":"","title":"otopi源码分析","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"otopi源码分析"},"children":[{"type":"text","value":"otopi源码分析"}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文以otopi源码的文档和参考资料"},{"type":"element","tag":"a","props":{"href":"https://resources.ovirt.org/old-site-files/wiki/Ovirt-host-deploy_3.2.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Ovirt-host-deloy_3.2.pdf"}]},{"type":"text","value":"为输入，用自己的语言来组织下对otopi的理解和使用。"}]},{"type":"element","tag":"h2","props":{"id":"otopi"},"children":[{"type":"text","value":"otopi"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"全名 oVirt Task Oriented Pluggable Installer/Implementation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基于独立插件的安装框架，可以用来设置系统环境。使用插件的性质尽可能的简化安装新功能的难度，摆脱状态和事务管理的复杂性。"}]},{"type":"element","tag":"pre","props":{"code":"// fixme  状态和事务管理的复杂性在哪里？为什么插件管理简单？\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// fixme  状态和事务管理的复杂性在哪里？为什么插件管理简单？\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"具有如下特点"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"模块化、面向任务的库实现"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持可插拔管理器的对话框协议，用于人机对话"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"本地化支持"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持本地和远程模式执行"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"分布式独立实现"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"兼容python 2.6 2.7 3.2"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"// fixme 这6点分别对应的是哪些代码?"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"留些问题，回头来看。"}]},{"type":"element","tag":"h3","props":{"id":"安装顺序"},"children":[{"type":"text","value":"安装顺序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"开放把提供的插件放到插件组中，每个插件需要使用@plugin.event来注册，需要提供阶段和优先级信息，每个插件可以提供用于检查条件的回调。状态管理是通过k/v的Environment来实现。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"install_sequence","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_installation_sequence.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Environment中的k/v值有三个来源，默认值、初始化之、通过Config文件覆盖的值。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在plugin.py文件中定义了18个阶段，他们的进入顺序如图中箭头所示。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"每个阶段定义了7个默认的优先级，数字越小优先级越高，最后执行插件方法排序的依据是优先级数字的大小，所以每个插件在传入PRIORITY_X的时候可以做+/-运算来调整执行顺序。"}]},{"type":"element","tag":"h3","props":{"id":"插件组"},"children":[{"type":"text","value":"插件组"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所有插件都由插件组来划分，可以通过ENVIRONMENT来传递给otopi，接下来Otopi会去加载${group_name}下的插件。"}]},{"type":"element","tag":"pre","props":{"code":"APPEND:BASE/pluginGroups=str:${group_name}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"APPEND:BASE/pluginGroups=str:${group_name}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"文件结构如下："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/ovirt_engine_packages_setup_plugins_list.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如其中ovirt-engine-common就是plugin groups，core文件夹下面的_ _ init__.py文件里面定义了core目录中包含了多少plugin. 如下图"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"image","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/ovirt_engine_packages_setup_plugins_plugin_createPlugins.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"定义了5个plugin"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"firewall_manager"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"firewall_ mamager_firewalld"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"firewall_ manager_human"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"firewall_ manager_iptables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"hostname"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所有Plugin都继承自PluginBase并使用@Plugin.event注解来声明该插件所在的流程位置，python模块可以使用createPlugins方法来加载插件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面是一个示例，假设写了plugin example1 在group1里面"}]},{"type":"element","tag":"pre","props":{"code":"//__init__.py\nfrom otopi import util\n\nfrom . import example1\n\n@util.export\ndef createPlugins(context):\n    example1.Plugin(context=context)\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//__init__.py\nfrom otopi import util\n\nfrom . import example1\n\n@util.export\ndef createPlugins(context):\n    example1.Plugin(context=context)\n"}]}]},{"type":"element","tag":"pre","props":{"code":"//example1.py\nimport platform\nimport gettext\n_ = lambda m: gettext.dgettext(message=m, domain='otopi')\n\n\nfrom otopi import constants\nfrom otopi import util\nfrom otopi import plugin\nfrom otopi import filetransaction\n\n\n@util.export\nclass Plugin(plugin.PluginBase):\n\n    def __init__(self, context):\n        super(Plugin, self).__init__(context=context)\n\n    #\n    # 使用默认的优先级注册到STAGE_INIT阶段\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_INIT,\n    )\n    def _init(self):\n\n        #\n        # 使用默认值来保持现存的ENVIRONMENT\n        #\n        self.environment.setdefault('var1', False)\n\n    #\n    # 执行验证，修改的最后机会\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_VALIDATION,\n        priority=plugin.Stages.PRIORITY_LOW,\n    )\n    def _validate(self):\n        if not self._distribution in ('redhat', 'fedora'):\n            raise RuntimeError(\n                _('Unsupported distribution for iptables plugin')\n            )\n\n    #\n    # 执行插件的对应工作.\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_MISC,\n        condition=lambda self: self.environment['var1'],\n    )\n    def _store_iptables(self):\n            self.environment[constants.CoreEnv.TRANSACTION].append(\n                filetransaction.FileTransaction(\n                    name='/etc/example1.conf',\n                    content=(\n                        'hello',\n                        'world',\n                    )\n                )\n            )\n\n@util.export\ndef createPlugins(context):\n    Plugin(context=context)\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//example1.py\nimport platform\nimport gettext\n_ = lambda m: gettext.dgettext(message=m, domain='otopi')\n\n\nfrom otopi import constants\nfrom otopi import util\nfrom otopi import plugin\nfrom otopi import filetransaction\n\n\n@util.export\nclass Plugin(plugin.PluginBase):\n\n    def __init__(self, context):\n        super(Plugin, self).__init__(context=context)\n\n    #\n    # 使用默认的优先级注册到STAGE_INIT阶段\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_INIT,\n    )\n    def _init(self):\n\n        #\n        # 使用默认值来保持现存的ENVIRONMENT\n        #\n        self.environment.setdefault('var1', False)\n\n    #\n    # 执行验证，修改的最后机会\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_VALIDATION,\n        priority=plugin.Stages.PRIORITY_LOW,\n    )\n    def _validate(self):\n        if not self._distribution in ('redhat', 'fedora'):\n            raise RuntimeError(\n                _('Unsupported distribution for iptables plugin')\n            )\n\n    #\n    # 执行插件的对应工作.\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_MISC,\n        condition=lambda self: self.environment['var1'],\n    )\n    def _store_iptables(self):\n            self.environment[constants.CoreEnv.TRANSACTION].append(\n                filetransaction.FileTransaction(\n                    name='/etc/example1.conf',\n                    content=(\n                        'hello',\n                        'world',\n                    )\n                )\n            )\n\n@util.export\ndef createPlugins(context):\n    Plugin(context=context)\n\n"}]}]},{"type":"element","tag":"h3","props":{"id":"环境"},"children":[{"type":"text","value":"环境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"环境包含两个部分 系统变量和安装环境变量"}]},{"type":"element","tag":"h4","props":{"id":"系统变量"},"children":[{"type":"text","value":"系统变量"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以用来覆盖安装环境变量，一般用来调试。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"选取几个变量"}]},{"type":"element","tag":"pre","props":{"code":"    OTOPI_CONFIG\n        配置文件\n        覆盖了 安装环境的CORE/configFileName.\n\n    OTOPI_DEBUG\n        是否开启调试特性，0表示关闭\n        覆盖了 安装环境的BASE/debug.\n    \n    OTOPI_LOGDIR\n        日志目录\n        覆盖了安装环境的CORE/logDir.\n    \n    OTOPI_LOGFILE\n        指定了日志文件\n        覆盖了安装环境的CORE/logFileName.\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    OTOPI_CONFIG\n        配置文件\n        覆盖了 安装环境的CORE/configFileName.\n\n    OTOPI_DEBUG\n        是否开启调试特性，0表示关闭\n        覆盖了 安装环境的BASE/debug.\n    \n    OTOPI_LOGDIR\n        日志目录\n        覆盖了安装环境的CORE/logDir.\n    \n    OTOPI_LOGFILE\n        指定了日志文件\n        覆盖了安装环境的CORE/logFileName.\n"}]}]},{"type":"element","tag":"h4","props":{"id":"安装环境变量"},"children":[{"type":"text","value":"安装环境变量"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在constants.py中定义了所有的插件变量"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"otopi_installer_environment_constants_py_variables","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_installer_environment_constants_py_variables.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其中两个注解的意思是"}]},{"type":"element","tag":"pre","props":{"code":"@util.export    //导出该类\n@util.codegen   //将下面变量定义成class的可访问属性\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"@util.export    //导出该类\n@util.codegen   //将下面变量定义成class的可访问属性\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上图中定义的变量都可以通过import的方式被plugin访问引用，从而影响plugin的行为，而且更进一步让ovirt-engine通过otopi提供的MachineDialogParser类来与变量交互。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"netenv_ssh","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_ovirt_engine_set_NetEnv_SSH_USER.png?raw=ture"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参考几个关键的Environment"}]},{"type":"element","tag":"pre","props":{"code":"\n    BASE/pluginGroups(str)\n        通过 \":\"来切分的插件组\n    CORE/configFileName(str) [/etc/otopi.conf]\n        默认路径是/etc/otopi.conf的配置文件\n    NETWORK/sshEnable(bool) [False]\n        是否存储ssh的密钥，默认不存。\n    NETWORK/iptablesRules(multi-str)\n        iptables的过滤规则，多条str\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n    BASE/pluginGroups(str)\n        通过 \":\"来切分的插件组\n    CORE/configFileName(str) [/etc/otopi.conf]\n        默认路径是/etc/otopi.conf的配置文件\n    NETWORK/sshEnable(bool) [False]\n        是否存储ssh的密钥，默认不存。\n    NETWORK/iptablesRules(multi-str)\n        iptables的过滤规则，多条str\n"}]}]},{"type":"element","tag":"h3","props":{"id":"对话框"},"children":[{"type":"text","value":"对话框"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"dialog是plugins用来和外部交互的接口。交互的对象包括Human和Machine类。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我的理解是："}]},{"type":"element","tag":"pre","props":{"code":"human的交互模式就是 command line interactive mode\n\nmachine的交互模式就是answer file mode\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"human的交互模式就是 command line interactive mode\n\nmachine的交互模式就是answer file mode\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"支持的交互包括"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"terminate"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"note"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"queries\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"string"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"multi-string"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"value"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"display\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"multi-string"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"value"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"confirm"}]}]},{"type":"element","tag":"h4","props":{"id":"定制和结束对话框"},"children":[{"type":"text","value":"定制和结束对话框"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在启动otopi之前传入DIALOG/customization=bool:Ture，可以开启comman 交互模式，这个模式下会有一些简单的命令可以使用，如下"}]},{"type":"element","tag":"pre","props":{"code":"abort - Abort process\nenv-get - Get environment variable\nenv-query - Query environment variable\nenv-query-multi - Get multi string environment variable\nenv-set - Set environment variable\nenv-show - Display environment\nexception-show - show exception information\nhelp - Display available commands\ninstall - Install software\nlog - Retrieve log file\nnoop - No operation\nquit - Quit\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"abort - Abort process\nenv-get - Get environment variable\nenv-query - Query environment variable\nenv-query-multi - Get multi string environment variable\nenv-set - Set environment variable\nenv-show - Display environment\nexception-show - show exception information\nhelp - Display available commands\ninstall - Install software\nlog - Retrieve log file\nnoop - No operation\nquit - Quit\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以通过这些命令来操作environment，一般在每个stages的定制和结束前可以执行。效果如下图"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"otopi_dialog_customization","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_dialog_customization_true.png?raw=true"},"children":[]}]},{"type":"element","tag":"h3","props":{"id":"bundle"},"children":[{"type":"text","value":"bundle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"略"}]},{"type":"element","tag":"h2","props":{"id":"源码分析"},"children":[{"type":"text","value":"源码分析"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"otopi属于Ovirt下的一个子项目，开发仓库"},{"type":"element","tag":"a","props":{"href":"https://gerrit.ovirt.org/","rel":["nofollow"]},"children":[{"type":"text","value":"gerrit"}]}]},{"type":"element","tag":"pre","props":{"code":"    git clone https://gerrit.ovirt.org/otopi\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    git clone https://gerrit.ovirt.org/otopi\n"}]}]},{"type":"element","tag":"h3","props":{"id":"安装"},"children":[{"type":"text","value":"安装"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目文档中提供了INSTALL"}]},{"type":"element","tag":"pre","props":{"code":"    autoreconf -ivf\n    ./configure\n    make\n    make install\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    autoreconf -ivf\n    ./configure\n    make\n    make install\n"}]}]},{"type":"element","tag":"h3","props":{"id":"目录"},"children":[{"type":"text","value":"目录"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"核心的内容在一下四个目录"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"src/bin   otopi命令入口脚本"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"src/java  otopi提供给外部Java程序和Environment交互的工具jar包的源码"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"src/otopi otopi架构的核心代码"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"src/plugins/otopi otopi内置的插件，外部在使用otopi来实现安装过程中会默认加载这些插件"}]}]},{"type":"element","tag":"h4","props":{"id":"binotopi"},"children":[{"type":"text","value":"bin/otopi"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个脚本在完成必要的 环境检查（bundle\\root\\ptyon-version)之后进入otopi._ _ main__中"}]},{"type":"element","tag":"h4","props":{"id":"srcotopi"},"children":[{"type":"text","value":"src/otopi"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"梳理下otopi运行的核心代码的流程如下图"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"otopi_code_process_flow","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_core_code_process_flow.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以简单分成两部分："}]},{"type":"element","tag":"pre","props":{"code":"\n    installer =main.Otopi() //开始进行初始化工作。\n    \n    installer.execute() //根据传入的参数开始执行对应的业务。\n    \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n    installer =main.Otopi() //开始进行初始化工作。\n    \n    installer.execute() //根据传入的参数开始执行对应的业务。\n    \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"初始化部"}]},{"type":"text","value":"分可以看到，otopi主要包含了4个对象:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Dialog\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"humam"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"machineDialog"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Services\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"rhel"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"openrc"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"systemd"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Packager\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"dnfpackager"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"yumpackager"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Command"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了command外其他都属于虚类，具体实现由子项中的子类来实现。在otopi的初始化阶段，context只保存虚类，所有子类全部由插件的方式提供，该子类插件的对应阶段执行时，执行响应的context.registerXXXXX()方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"例如："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"otopi_human_dialog_registerdialog","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_human_dialog_registerdialog.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在context中，registerXXXX()都属于覆盖（registerPlugin、registerNotification除外），在完成覆盖后，由对应插件的子类来实现具体功能，如下："}]},{"type":"element","tag":"pre","props":{"code":"    def registerNotification(self, notification):\n        self._notifications.append(notification)\n\n    def registerPlugin(self, p):\n        self._plugins.append(p)\n\n    def registerDialog(self, dialog):\n        self._dialog = dialog\n\n    def registerServices(self, services):\n        self._services = services\n\n    def registerPackager(self, packager):\n        self._packager = packager\n\n    def registerCommand(self, command):\n        self._command = command\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    def registerNotification(self, notification):\n        self._notifications.append(notification)\n\n    def registerPlugin(self, p):\n        self._plugins.append(p)\n\n    def registerDialog(self, dialog):\n        self._dialog = dialog\n\n    def registerServices(self, services):\n        self._services = services\n\n    def registerPackager(self, packager):\n        self._packager = packager\n\n    def registerCommand(self, command):\n        self._command = command\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"运行阶段"}]},{"type":"text","value":"分为三个步骤，加载插件、构建插件执行序列、按序列执行插件。"}]},{"type":"element","tag":"h5","props":{"id":"加载插件"},"children":[{"type":"text","value":"加载插件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"加载插件"}]},{"type":"text","value":"的主要工作是根据BASE/pluginGroups指定的目标插件组(needgroups)，去BASE/pluginPath路径下寻找。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在needgroups中，otopi会默认增加自己预定义的插件，即src/plugins/otopi目录。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"内置的插件共22个"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"default_plugin","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_default_plugins.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"找到对应的Plugin中后会调用Util.loadModule来加载该python模块，并执行该模块的_ _ init__.py中的createPlugins方法，该方法中定义了模块路径下所有的plugin入口。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所有定义的plugin都会继承PluginBase类，该类的_ _ init _ _ 方法中会调用registerPlugin，从而在context._plugins"},{"type":"element","tag":"span","props":{},"children":[]},{"type":"text","value":"中保存了所有注册的plugins，这是第二步骤的输入。"}]},{"type":"element","tag":"h5","props":{"id":"构建插件执行顺序"},"children":[{"type":"text","value":"构建插件执行顺序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"构建插件执行序列"}]},{"type":"text","value":"的主要工作是根据@util.event中的before和after来构建一个有向无环图(toposort)。每个plugin都可以定义before和after两个变量，设定当前的plguin为current。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根据注释中 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"before=EVENTNAMESLIST -- place this event before the events with names EVENTNAMESLIST."}]},{"type":"text","value":" 的说明，那么可以产生(current,before)和(after,current)多个向量【经过分析代码验证相同】，通过全部插件的全部向量，我们可以绘制出多个有向无环图(需要错误检查)。同时使用prioty和stage两个参数来实现分组。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面随便寻找一个toposort group结果来示意下："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行构建的方法是 _toposortBuildSequence ，简单的理解就是先根据"}]},{"type":"element","tag":"pre","props":{"code":" (current,before)\n (after,current)\n i.stage == j.stage && i.priority < j.priority ? (i, j) : ( j , i )\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" (current,before)\n (after,current)\n i.stage == j.stage && i.priority < j.priority ? (i, j) : ( j , i )\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"来生成对应的向量，最后的结果如下图"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"deps_vector","src":"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi__toposortBuildSequence_deps.png?raw=true"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"挑一些标出来的向量，如"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"红色 : (1,256) .  绿色 : (4, 73) .  蓝色 : (6,20) ."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样的就有了一堆的经过检查的向量。下面的就是将这些已定义的向量进行拓扑排序。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"拓扑排序的方法是_toposort ， 算法学习详见"},{"type":"element","tag":"a","props":{"href":"http://note.youdao.com/noteshare?id=fc2dfe95bd2905d91185bafc91d7b149&sub=422857DAC7294892AD99F5E9A2D62326","rel":["nofollow"]},"children":[{"type":"text","value":"这篇"}]}]},{"type":"element","tag":"h5","props":{"id":"按序列执行插件"},"children":[{"type":"text","value":"按序列执行插件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"排序后得到的结果是一个二维list，这里的stage就是otopi预定的18个阶段的枚举值，这里的method 包含了plugin主要信息的结构体（包含了每个插件的method和condition）"}]},{"type":"element","tag":"pre","props":{"code":"[\n    {\n        stage0:[method0,method1,...]\n    },\n    {\n        stage1:[method0,method1,...]\n    },\n    ...\n]\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"[\n    {\n        stage0:[method0,method1,...]\n    },\n    {\n        stage1:[method0,method1,...]\n    },\n    ...\n]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后就是按前面说的安装顺序依次执行method"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里注意2点："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每次执行method的时候需要先执行condition，condition由定义plugin时候指定"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"每次执行method前需要保存oldEnvironment，因为Plugin在执行的过程中有可能会修改Environment，需改的部分都会被dump到日志中。"}]}]},{"type":"element","tag":"h4","props":{"id":"srcpluginsotopi"},"children":[{"type":"text","value":"src/plugins/otopi"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面针对otopi提供的几个内置的plugin来进行分析。内容也会涉及部分ovirt-engine的setup脚本，下面内容不做区分。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_boot:"}]},{"type":"element","tag":"pre","props":{"code":"根据environment定义dialog的模式（human/machine）\n注册一些信息到environment中，如包名、版本\n确定packager管理方式dnf/yum，默认推荐dnf\n//todo dnf和yum的代码逻辑 otopi.plugins.otopi.packagers.[dnfpackager/yumpackager]\n把密码设置为敏感字，在日志打印时候就会屏蔽不输出\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"根据environment定义dialog的模式（human/machine）\n注册一些信息到environment中，如包名、版本\n确定packager管理方式dnf/yum，默认推荐dnf\n//todo dnf和yum的代码逻辑 otopi.plugins.otopi.packagers.[dnfpackager/yumpackager]\n把密码设置为敏感字，在日志打印时候就会屏蔽不输出\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_init："}]},{"type":"element","tag":"pre","props":{"code":"找到所有需要解析的配置文件\notopi的初始化过程由每个Plugin执行对应的初始化来完成，如packager\\command\\transaction\n//todo transaction的代码逻辑 otopi.core.transaction\n初始化部分插件相关的environment，如cli/firewalld/iptables/ssh/clock/reboot/answerfile/hostile_service/selinux/fence_kdump_listener/db/java/....\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"找到所有需要解析的配置文件\notopi的初始化过程由每个Plugin执行对应的初始化来完成，如packager\\command\\transaction\n//todo transaction的代码逻辑 otopi.core.transaction\n初始化部分插件相关的environment，如cli/firewalld/iptables/ssh/clock/reboot/answerfile/hostile_service/selinux/fence_kdump_listener/db/java/....\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_setup"}]},{"type":"element","tag":"pre","props":{"code":"检测关键命令是否存在，如ip/firewall-cmd/reboot/openssl.....\n计算系统的一些信息，如最大内存\n连接数据库\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"检测关键命令是否存在，如ip/firewall-cmd/reboot/openssl.....\n计算系统的一些信息，如最大内存\n连接数据库\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_internal _packages"}]},{"type":"element","tag":"pre","props":{"code":"//todo  trascation相关\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"//todo  trascation相关\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_programs"}]},{"type":"element","tag":"pre","props":{"code":"在PATH路径下找对应的命令\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"在PATH路径下找对应的命令\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_late _setup"}]},{"type":"element","tag":"pre","props":{"code":"nfs/websocket\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nfs/websocket\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_customization"}]},{"type":"element","tag":"pre","props":{"code":"解析conf文件定义的变量，并覆盖现有的变量\n使用command进行customization\n用户通过输入plugin接收的参数来控制产品的形态，并影响对应的environment，engine的产品configure阶段就是在这个阶段来整合。\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"解析conf文件定义的变量，并覆盖现有的变量\n使用command进行customization\n用户通过输入plugin接收的参数来控制产品的形态，并影响对应的environment，engine的产品configure阶段就是在这个阶段来整合。\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_validation"}]},{"type":"element","tag":"pre","props":{"code":"检查写到Environment 里面的value的格式\n检查当前依赖的服务运行状态、系统信息、db权属、需要的文件和目录\n执行预写的脚本完成特定的任务，如taskcleaner\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"检查写到Environment 里面的value的格式\n检查当前依赖的服务运行状态、系统信息、db权属、需要的文件和目录\n执行预写的脚本完成特定的任务，如taskcleaner\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_transaction _begin"}]},{"type":"element","tag":"pre","props":{"code":"fence_kdump_listener/websocket/notifier service\n//todo ?? \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"fence_kdump_listener/websocket/notifier service\n//todo ?? \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_early _misc"}]},{"type":"element","tag":"pre","props":{"code":"使用firewall-cmd重启服务\n//Fixing Engine database inconsistences\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"使用firewall-cmd重启服务\n//Fixing Engine database inconsistences\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_packages"}]},{"type":"element","tag":"pre","props":{"code":"这里可以用来安装依赖的外部packages\n//yum/dnf -- processTransaction()  ??\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"这里可以用来安装依赖的外部packages\n//yum/dnf -- processTransaction()  ??\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_misc"}]},{"type":"element","tag":"pre","props":{"code":"使用filetransaction来完成文件操作\n生成CA证书、数据库初始化或升级\n把其他plugin的更新信息加入到数据中\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"使用filetransaction来完成文件操作\n生成CA证书、数据库初始化或升级\n把其他plugin的更新信息加入到数据中\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_transaction _end"}]},{"type":"element","tag":"pre","props":{"code":"transaction.commit()\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"transaction.commit()\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_closeup"}]},{"type":"element","tag":"pre","props":{"code":"启动或重启服务\n打印总结信息\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"启动或重启服务\n打印总结信息\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_cleanup"}]},{"type":"element","tag":"pre","props":{"code":"显示日志路径、生成answer file\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"显示日志路径、生成answer file\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_pre _terminate"}]},{"type":"element","tag":"pre","props":{"code":"dump environment\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"dump environment\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_terminate"}]},{"type":"element","tag":"pre","props":{"code":"log/human/machine\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"log/human/machine\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Stage_reboot"}]},{"type":"element","tag":"pre","props":{"code":"或许重启系统\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"或许重启系统\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"前言","depth":2,"text":"前言"},{"id":"otopi","depth":2,"text":"otopi","children":[{"id":"安装顺序","depth":3,"text":"安装顺序"},{"id":"插件组","depth":3,"text":"插件组"},{"id":"环境","depth":3,"text":"环境"},{"id":"对话框","depth":3,"text":"对话框"},{"id":"bundle","depth":3,"text":"bundle"}]},{"id":"源码分析","depth":2,"text":"源码分析","children":[{"id":"安装","depth":3,"text":"安装"},{"id":"目录","depth":3,"text":"目录"}]}]}},"_type":"markdown","_id":"content:blog:otopi:analyze.md","_source":"content","_file":"blog/otopi/analyze.md","_extension":"md"}