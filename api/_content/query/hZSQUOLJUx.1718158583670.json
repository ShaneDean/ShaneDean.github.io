{"_path":"/blog/linux/kbuild","_dir":"linux","_draft":false,"_partial":false,"_locale":"","title":"kbuild","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"kbuild"},"children":[{"type":"text","value":"kbuild"}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参考"},{"type":"element","tag":"a","props":{"href":"https://jin-yang.github.io/reference/linux/kernel/KBUILD_system.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"KBUILD系统原理分析"}]}]},{"type":"element","tag":"h2","props":{"id":"make-总结"},"children":[{"type":"text","value":"make 总结"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"依次读取变量\"MAKEFILES\"定义的makefile文件列表"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"读取工作目录下的Makefile文件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"依次读取工作目录makefile文件中使用指示符\"include\"包含的文件"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"查找重建所有以读取的makefile文件的规则"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"初始化变量值并展开那些需要立即展开的变量和函数并根据预设条件确定执行分支"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"根据“最终目标”以及其他目标的依赖关系建立依赖关系链表"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"执行除“最终目标”以外的所有的目标的规则"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"执行最终目标所在的规则"}]}]},{"type":"element","tag":"h2","props":{"id":"kbuild-make"},"children":[{"type":"text","value":"KBUILD MAKE"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"文件名"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"说明"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Makefile"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"顶层 Makefile"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":".config"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内核配置文件"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"arch/$(ARCH)/Makefile"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"具体架构的 Makefile"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"scripts/Makefile.*"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"通用的规则等，面向所有的 Kbuild Makefiles。"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"kbuild Makefiles"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内核源代码中大约有 500 个这样的文件"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"目标定义"},"children":[{"type":"text","value":"目标定义"}]},{"type":"element","tag":"pre","props":{"code":"obj-$(CONFIG_FOO)+=foo.o\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"obj-$(CONFIG_FOO)+=foo.o\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"$(CONFIG_FOO) 可以为 y (编译进内核) 或 m (编译成模块)。否则的话  foo.o就不会被编译连接了"}]},{"type":"element","tag":"h4","props":{"id":"obj-y"},"children":[{"type":"text","value":"obj-y"}]},{"type":"element","tag":"pre","props":{"code":"KBuild Makefile规定编译进内核的文件都存在$(obj-y)的列表中。\n编译所有的$(obj-y)文件，然后调用$(LD) -r将它们合并到一个build-in.o文件中，然后该文件会被其父Makefile连接到vmlinux中\n$(obj-y)中的文件有顺序，可以重复项。连接过程有顺序，有些函数module_init()/__initcall将会在启动时按照他们出现的顺序进行调用。\n注意顺序会改变SCSI控制器的检测顺序，从而导致硬盘数据损害\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"KBuild Makefile规定编译进内核的文件都存在$(obj-y)的列表中。\n编译所有的$(obj-y)文件，然后调用$(LD) -r将它们合并到一个build-in.o文件中，然后该文件会被其父Makefile连接到vmlinux中\n$(obj-y)中的文件有顺序，可以重复项。连接过程有顺序，有些函数module_init()/__initcall将会在启动时按照他们出现的顺序进行调用。\n注意顺序会改变SCSI控制器的检测顺序，从而导致硬盘数据损害\n"}]}]},{"type":"element","tag":"h4","props":{"id":"obj-m"},"children":[{"type":"text","value":"obj-m"}]},{"type":"element","tag":"pre","props":{"code":"列举了哪些文件要编译成可装载模块\n一个模块可以由一个文件或多个文件编译而成。\n一个文件直接加$(obj-m)\n多个文件，需要声明编译的模块。通过变量$(<module_name>-objs)声明哪些文件在\n让 KbuildMakefile 可以通过使用 CONFIG_符号来判断该对象是否是用来组合对象的\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"列举了哪些文件要编译成可装载模块\n一个模块可以由一个文件或多个文件编译而成。\n一个文件直接加$(obj-m)\n多个文件，需要声明编译的模块。通过变量$(<module_name>-objs)声明哪些文件在\n让 KbuildMakefile 可以通过使用 CONFIG_符号来判断该对象是否是用来组合对象的\n"}]}]},{"type":"element","tag":"h4","props":{"id":"lib-y"},"children":[{"type":"text","value":"lib-y"}]},{"type":"element","tag":"pre","props":{"code":"其中所列的文件来组成目录下的一个库文件。\n在obj-y和lib-y中同时出现的文件，因为都是可以访问的，所以该文件不会被包含在库文件中。\n相同情况的lib-m中的文件就会包含在lib.a库文件中\nbuild-in.o和lib.a可以同时出现在一个目录里面\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"其中所列的文件来组成目录下的一个库文件。\n在obj-y和lib-y中同时出现的文件，因为都是可以访问的，所以该文件不会被包含在库文件中。\n相同情况的lib-m中的文件就会包含在lib.a库文件中\nbuild-in.o和lib.a可以同时出现在一个目录里面\n"}]}]},{"type":"element","tag":"h4","props":{"id":"访问子目录"},"children":[{"type":"text","value":"访问子目录"}]},{"type":"element","tag":"pre","props":{"code":"一个Makefile只对编译所在的目录对象负责。在子目录中的文件的编译要由其所在的子目录的MakeFile来管理。\n通过obj-$(CONFIG_MODULE_NAME) += module_dirctory/\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"一个Makefile只对编译所在的目录对象负责。在子目录中的文件的编译要由其所在的子目录的MakeFile来管理。\n通过obj-$(CONFIG_MODULE_NAME) += module_dirctory/\n"}]}]},{"type":"element","tag":"h4","props":{"id":"编辑标志"},"children":[{"type":"text","value":"编辑标志"}]},{"type":"element","tag":"pre","props":{"code":"EXTRA_变量只在所定义的Kbuild Makefile中起作用\n\n$(EXTRA_CFLAGS) 是用 $(CC) 编译 C 源文件时的选项。\n$(EXTRA_AFLAGS)也是一个针对每个目录的选项，只不过它是用来编译汇编源代码的。\n$(EXTRA_LDFLAGS) 和 $(EXTRA_ARFLAGS)分别与 $(LD)和 $(AR)类似，只不过，他们是针对每个目录的。\n\n$(CFLAGS_$@) 是 $(CC) 针对每个文件的选项。$@ 表明了具体操作的文件。\n$(AFLAGS_$@) 也类似，只不是是针对汇编语言的。\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"EXTRA_变量只在所定义的Kbuild Makefile中起作用\n\n$(EXTRA_CFLAGS) 是用 $(CC) 编译 C 源文件时的选项。\n$(EXTRA_AFLAGS)也是一个针对每个目录的选项，只不过它是用来编译汇编源代码的。\n$(EXTRA_LDFLAGS) 和 $(EXTRA_ARFLAGS)分别与 $(LD)和 $(AR)类似，只不过，他们是针对每个目录的。\n\n$(CFLAGS_$@) 是 $(CC) 针对每个文件的选项。$@ 表明了具体操作的文件。\n$(AFLAGS_$@) 也类似，只不是是针对汇编语言的。\n"}]}]},{"type":"element","tag":"h4","props":{"id":"其他"},"children":[{"type":"text","value":"其他"}]},{"type":"element","tag":"pre","props":{"code":"跟踪依赖\n    \n    1、所有要参与编译的文件（.c和.h)文件\n    2、在参与编译文件中所要使用的CONFIG_选项\n    3、用于编译目标的命令行\n    \n    \n特殊依赖\n    \n    $(src)表明 Makefile所在目录的相对路径。经常在定位源代码树中的文件时，使用该变量。\n    $(obj) 表明目标文件所要存储目录的相对路径。经常在定位所生成的文件时，使用该变量。\n    \n支持的函数\nas-option，当编译汇编文件(*.S)时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\nld-option，当联接目标文件时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\ncc-option，用来检查 $(CC) 是否支持特定选项,并且不支持使用可选的第二项。\ncc-option-yn,用来检查 gcc 是否支持特定选项，返回'y'支持，否则为'n'。\n\ncc-option-align  : gcc 版本大于 3.0时，改变了函数，循环等用来声明内存对齐的选项。当用到对齐选项时，$(cc-option-align) 用来选择正确的前缀\ncc-version 以数学形式返回 $(CC)编译器的版本号。其格式是：<major><minor>，二者都是数学。\ncc-ifversion 测试 $(CC) 的版本号，如果版本表达式为真，就赋值为最后的参数。    \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"跟踪依赖\n    \n    1、所有要参与编译的文件（.c和.h)文件\n    2、在参与编译文件中所要使用的CONFIG_选项\n    3、用于编译目标的命令行\n    \n    \n特殊依赖\n    \n    $(src)表明 Makefile所在目录的相对路径。经常在定位源代码树中的文件时，使用该变量。\n    $(obj) 表明目标文件所要存储目录的相对路径。经常在定位所生成的文件时，使用该变量。\n    \n支持的函数\nas-option，当编译汇编文件(*.S)时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\nld-option，当联接目标文件时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\ncc-option，用来检查 $(CC) 是否支持特定选项,并且不支持使用可选的第二项。\ncc-option-yn,用来检查 gcc 是否支持特定选项，返回'y'支持，否则为'n'。\n\ncc-option-align  : gcc 版本大于 3.0时，改变了函数，循环等用来声明内存对齐的选项。当用到对齐选项时，$(cc-option-align) 用来选择正确的前缀\ncc-version 以数学形式返回 $(CC)编译器的版本号。其格式是：<major><minor>，二者都是数学。\ncc-ifversion 测试 $(CC) 的版本号，如果版本表达式为真，就赋值为最后的参数。    \n"}]}]},{"type":"element","tag":"h3","props":{"id":"本地程序支持"},"children":[{"type":"text","value":"本地程序支持"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Kbuild将编译分成了2个阶段"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"告诉Kbuild存在哪些可执行文件。通过变量hostprogs-y来完成的。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"添加一个对可执行文件的显性依赖。（通过增加依赖关系到一个规则中，或是利用$(always)）"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"$("},{"type":"element","tag":"executeable","props":{},"children":[{"type":"text","value":"-objs) 列出了联接成最后的可执行文件所需的所有目标文件。"}]}]},{"type":"element","tag":"h4","props":{"id":"定义共享库"},"children":[{"type":"text","value":"定义共享库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"扩展名为 so 的文件称为共享库，被编译成位置无关对象。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"共享库文件经常要求一个相应的 -objs，"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"程序经常是利用$(HOSTCC)编译,其选项在 $(HOSTCFLAGS)变量中。可通过使用变量 HOST＿EXTRACFLAGS，影响所有在 Makefile 文件中要创建的主机程序。"}]},{"type":"element","tag":"h3","props":{"id":"构建makefile"},"children":[{"type":"text","value":"构建Makefile"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Kbuild 执行的几个步骤"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"根据内核配置生产文件.config"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"将内核的版本号存储在include/linux/version.h"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"生产指向include/asm-$(ARCH)的符号链接"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更新所有编译所需的文件：附加的文件由arch/$(ARCH)/Makefile指定"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"递归向下访问所有在下列变量中列出的目录 init-* core* drivers-* net-* libs-*,并编译生成目标文件。这些变量的值可以再arch/$(ARCH)/Makefile中扩充。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"链接所有的目标文件，在源代码树顶层目录中生成vmlinux。最先链接是在head-y中列出的文件，该变量由arch/$(ARCH)/Makefile赋值"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"最后完成具体架构的特殊要求，并生成最终的启动镜像（ 包含生成启动指令， 准备 initrd 镜像或类似文件）"}]}]},{"type":"element","tag":"h4","props":{"id":"针对具体架构的调整"},"children":[{"type":"text","value":"针对具体架构的调整"}]},{"type":"element","tag":"pre","props":{"code":"LDFLAGS 一般是$(LD)选项\nLDFLAGS_Module 链接模块时的链接器选项，在链接模块.ko文件使用\nLDFLAGS_vmlinux 用来链接vmlinux时使用\n\nOBJCOMPYFLAGS objcopy选项\n$(call if_changed,objcopy) 经常被用来为 vmlinux 生成原始的二进制代码\n\nAFLAGS $(AS) 汇编编译器选项\n\nCFLAGS $(CC) 编译器选项\n\n$(CFLAGS_KERNEL) 包含了用于编译常驻内核代码的附加编译器选项。\n\n$(CFLAGS_MODULE) 包含了用于编译可装载模块的附加编译器选项。\n\narchprepare 规则在递归访问子目录之前，列出编译目标文件所需文件。\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"LDFLAGS 一般是$(LD)选项\nLDFLAGS_Module 链接模块时的链接器选项，在链接模块.ko文件使用\nLDFLAGS_vmlinux 用来链接vmlinux时使用\n\nOBJCOMPYFLAGS objcopy选项\n$(call if_changed,objcopy) 经常被用来为 vmlinux 生成原始的二进制代码\n\nAFLAGS $(AS) 汇编编译器选项\n\nCFLAGS $(CC) 编译器选项\n\n$(CFLAGS_KERNEL) 包含了用于编译常驻内核代码的附加编译器选项。\n\n$(CFLAGS_MODULE) 包含了用于编译可装载模块的附加编译器选项。\n\narchprepare 规则在递归访问子目录之前，列出编译目标文件所需文件。\n\n"}]}]},{"type":"element","tag":"h4","props":{"id":"自定义kbuild命令"},"children":[{"type":"text","value":"自定义kbuild命令"}]},{"type":"element","tag":"pre","props":{"code":"    当 Kbuild 的变量 KBUILD_VERBOSE 为 0 时，只会显示命令的简写。\n    如果要为自定义命令使用这一功能，需要设置 2 个变量：\n    quiet_cmd_<command> - 要显示的命令\n    cmd_<command> - 要执行的命令\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    当 Kbuild 的变量 KBUILD_VERBOSE 为 0 时，只会显示命令的简写。\n    如果要为自定义命令使用这一功能，需要设置 2 个变量：\n    quiet_cmd_<command> - 要显示的命令\n    cmd_<command> - 要执行的命令\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"前言","depth":2,"text":"前言"},{"id":"make-总结","depth":2,"text":"make 总结"},{"id":"kbuild-make","depth":2,"text":"KBUILD MAKE","children":[{"id":"目标定义","depth":3,"text":"目标定义"},{"id":"本地程序支持","depth":3,"text":"本地程序支持"},{"id":"构建makefile","depth":3,"text":"构建Makefile"}]}]}},"_type":"markdown","_id":"content:blog:linux:kbuild.md","_source":"content","_file":"blog/linux/kbuild.md","_extension":"md"}