[{"data":1,"prerenderedAt":437},["Reactive",2],{"content-query-zQdDa7pFXO":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":432,"_id":433,"_source":434,"_file":435,"_extension":436},"/blog/linux/kbuild","linux",false,"","kbuild",{"type":10,"children":11,"toc":421},"root",[12,19,25,40,46,91,97,99,192,198,208,213,219,227,232,240,245,253,258,266,271,279,284,292,297,302,315,326,331,336,341,346,352,357,395,400,408,413],{"type":13,"tag":14,"props":15,"children":16},"element","h1",{"id":8},[17],{"type":18,"value":8},"text",{"type":13,"tag":20,"props":21,"children":23},"h2",{"id":22},"前言",[24],{"type":18,"value":22},{"type":13,"tag":26,"props":27,"children":28},"p",{},[29,31],{"type":18,"value":30},"参考",{"type":13,"tag":32,"props":33,"children":37},"a",{"href":34,"rel":35},"https://jin-yang.github.io/reference/linux/kernel/KBUILD_system.pdf",[36],"nofollow",[38],{"type":18,"value":39},"KBUILD系统原理分析",{"type":13,"tag":20,"props":41,"children":43},{"id":42},"make-总结",[44],{"type":18,"value":45},"make 总结",{"type":13,"tag":47,"props":48,"children":49},"ol",{},[50,56,61,66,71,76,81,86],{"type":13,"tag":51,"props":52,"children":53},"li",{},[54],{"type":18,"value":55},"依次读取变量\"MAKEFILES\"定义的makefile文件列表",{"type":13,"tag":51,"props":57,"children":58},{},[59],{"type":18,"value":60},"读取工作目录下的Makefile文件",{"type":13,"tag":51,"props":62,"children":63},{},[64],{"type":18,"value":65},"依次读取工作目录makefile文件中使用指示符\"include\"包含的文件",{"type":13,"tag":51,"props":67,"children":68},{},[69],{"type":18,"value":70},"查找重建所有以读取的makefile文件的规则",{"type":13,"tag":51,"props":72,"children":73},{},[74],{"type":18,"value":75},"初始化变量值并展开那些需要立即展开的变量和函数并根据预设条件确定执行分支",{"type":13,"tag":51,"props":77,"children":78},{},[79],{"type":18,"value":80},"根据“最终目标”以及其他目标的依赖关系建立依赖关系链表",{"type":13,"tag":51,"props":82,"children":83},{},[84],{"type":18,"value":85},"执行除“最终目标”以外的所有的目标的规则",{"type":13,"tag":51,"props":87,"children":88},{},[89],{"type":18,"value":90},"执行最终目标所在的规则",{"type":13,"tag":20,"props":92,"children":94},{"id":93},"kbuild-make",[95],{"type":18,"value":96},"KBUILD MAKE",{"type":18,"value":98},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":13,"tag":100,"props":101,"children":102},"table",{},[103,122],{"type":13,"tag":104,"props":105,"children":106},"thead",{},[107],{"type":13,"tag":108,"props":109,"children":110},"tr",{},[111,117],{"type":13,"tag":112,"props":113,"children":114},"th",{},[115],{"type":18,"value":116},"文件名",{"type":13,"tag":112,"props":118,"children":119},{},[120],{"type":18,"value":121},"说明",{"type":13,"tag":123,"props":124,"children":125},"tbody",{},[126,140,153,166,179],{"type":13,"tag":108,"props":127,"children":128},{},[129,135],{"type":13,"tag":130,"props":131,"children":132},"td",{},[133],{"type":18,"value":134},"Makefile",{"type":13,"tag":130,"props":136,"children":137},{},[138],{"type":18,"value":139},"顶层 Makefile",{"type":13,"tag":108,"props":141,"children":142},{},[143,148],{"type":13,"tag":130,"props":144,"children":145},{},[146],{"type":18,"value":147},".config",{"type":13,"tag":130,"props":149,"children":150},{},[151],{"type":18,"value":152},"内核配置文件",{"type":13,"tag":108,"props":154,"children":155},{},[156,161],{"type":13,"tag":130,"props":157,"children":158},{},[159],{"type":18,"value":160},"arch/$(ARCH)/Makefile",{"type":13,"tag":130,"props":162,"children":163},{},[164],{"type":18,"value":165},"具体架构的 Makefile",{"type":13,"tag":108,"props":167,"children":168},{},[169,174],{"type":13,"tag":130,"props":170,"children":171},{},[172],{"type":18,"value":173},"scripts/Makefile.*",{"type":13,"tag":130,"props":175,"children":176},{},[177],{"type":18,"value":178},"通用的规则等，面向所有的 Kbuild Makefiles。",{"type":13,"tag":108,"props":180,"children":181},{},[182,187],{"type":13,"tag":130,"props":183,"children":184},{},[185],{"type":18,"value":186},"kbuild Makefiles",{"type":13,"tag":130,"props":188,"children":189},{},[190],{"type":18,"value":191},"内核源代码中大约有 500 个这样的文件",{"type":13,"tag":193,"props":194,"children":196},"h3",{"id":195},"目标定义",[197],{"type":18,"value":195},{"type":13,"tag":199,"props":200,"children":202},"pre",{"code":201},"obj-$(CONFIG_FOO)+=foo.o\n",[203],{"type":13,"tag":204,"props":205,"children":206},"code",{"__ignoreMap":7},[207],{"type":18,"value":201},{"type":13,"tag":26,"props":209,"children":210},{},[211],{"type":18,"value":212},"$(CONFIG_FOO) 可以为 y (编译进内核) 或 m (编译成模块)。否则的话  foo.o就不会被编译连接了",{"type":13,"tag":214,"props":215,"children":217},"h4",{"id":216},"obj-y",[218],{"type":18,"value":216},{"type":13,"tag":199,"props":220,"children":222},{"code":221},"KBuild Makefile规定编译进内核的文件都存在$(obj-y)的列表中。\n编译所有的$(obj-y)文件，然后调用$(LD) -r将它们合并到一个build-in.o文件中，然后该文件会被其父Makefile连接到vmlinux中\n$(obj-y)中的文件有顺序，可以重复项。连接过程有顺序，有些函数module_init()/__initcall将会在启动时按照他们出现的顺序进行调用。\n注意顺序会改变SCSI控制器的检测顺序，从而导致硬盘数据损害\n",[223],{"type":13,"tag":204,"props":224,"children":225},{"__ignoreMap":7},[226],{"type":18,"value":221},{"type":13,"tag":214,"props":228,"children":230},{"id":229},"obj-m",[231],{"type":18,"value":229},{"type":13,"tag":199,"props":233,"children":235},{"code":234},"列举了哪些文件要编译成可装载模块\n一个模块可以由一个文件或多个文件编译而成。\n一个文件直接加$(obj-m)\n多个文件，需要声明编译的模块。通过变量$(\u003Cmodule_name>-objs)声明哪些文件在\n让 KbuildMakefile 可以通过使用 CONFIG_符号来判断该对象是否是用来组合对象的\n",[236],{"type":13,"tag":204,"props":237,"children":238},{"__ignoreMap":7},[239],{"type":18,"value":234},{"type":13,"tag":214,"props":241,"children":243},{"id":242},"lib-y",[244],{"type":18,"value":242},{"type":13,"tag":199,"props":246,"children":248},{"code":247},"其中所列的文件来组成目录下的一个库文件。\n在obj-y和lib-y中同时出现的文件，因为都是可以访问的，所以该文件不会被包含在库文件中。\n相同情况的lib-m中的文件就会包含在lib.a库文件中\nbuild-in.o和lib.a可以同时出现在一个目录里面\n",[249],{"type":13,"tag":204,"props":250,"children":251},{"__ignoreMap":7},[252],{"type":18,"value":247},{"type":13,"tag":214,"props":254,"children":256},{"id":255},"访问子目录",[257],{"type":18,"value":255},{"type":13,"tag":199,"props":259,"children":261},{"code":260},"一个Makefile只对编译所在的目录对象负责。在子目录中的文件的编译要由其所在的子目录的MakeFile来管理。\n通过obj-$(CONFIG_MODULE_NAME) += module_dirctory/\n",[262],{"type":13,"tag":204,"props":263,"children":264},{"__ignoreMap":7},[265],{"type":18,"value":260},{"type":13,"tag":214,"props":267,"children":269},{"id":268},"编辑标志",[270],{"type":18,"value":268},{"type":13,"tag":199,"props":272,"children":274},{"code":273},"EXTRA_变量只在所定义的Kbuild Makefile中起作用\n\n$(EXTRA_CFLAGS) 是用 $(CC) 编译 C 源文件时的选项。\n$(EXTRA_AFLAGS)也是一个针对每个目录的选项，只不过它是用来编译汇编源代码的。\n$(EXTRA_LDFLAGS) 和 $(EXTRA_ARFLAGS)分别与 $(LD)和 $(AR)类似，只不过，他们是针对每个目录的。\n\n$(CFLAGS_$@) 是 $(CC) 针对每个文件的选项。$@ 表明了具体操作的文件。\n$(AFLAGS_$@) 也类似，只不是是针对汇编语言的。\n",[275],{"type":13,"tag":204,"props":276,"children":277},{"__ignoreMap":7},[278],{"type":18,"value":273},{"type":13,"tag":214,"props":280,"children":282},{"id":281},"其他",[283],{"type":18,"value":281},{"type":13,"tag":199,"props":285,"children":287},{"code":286},"跟踪依赖\n    \n    1、所有要参与编译的文件（.c和.h)文件\n    2、在参与编译文件中所要使用的CONFIG_选项\n    3、用于编译目标的命令行\n    \n    \n特殊依赖\n    \n    $(src)表明 Makefile所在目录的相对路径。经常在定位源代码树中的文件时，使用该变量。\n    $(obj) 表明目标文件所要存储目录的相对路径。经常在定位所生成的文件时，使用该变量。\n    \n支持的函数\nas-option，当编译汇编文件(*.S)时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\nld-option，当联接目标文件时，用来检查 $(CC) 是否支持特定选项。如果第一个选项不支持的话，可选的第二个选项可以用来指定。\ncc-option，用来检查 $(CC) 是否支持特定选项,并且不支持使用可选的第二项。\ncc-option-yn,用来检查 gcc 是否支持特定选项，返回'y'支持，否则为'n'。\n\ncc-option-align  : gcc 版本大于 3.0时，改变了函数，循环等用来声明内存对齐的选项。当用到对齐选项时，$(cc-option-align) 用来选择正确的前缀\ncc-version 以数学形式返回 $(CC)编译器的版本号。其格式是：\u003Cmajor>\u003Cminor>，二者都是数学。\ncc-ifversion 测试 $(CC) 的版本号，如果版本表达式为真，就赋值为最后的参数。    \n",[288],{"type":13,"tag":204,"props":289,"children":290},{"__ignoreMap":7},[291],{"type":18,"value":286},{"type":13,"tag":193,"props":293,"children":295},{"id":294},"本地程序支持",[296],{"type":18,"value":294},{"type":13,"tag":26,"props":298,"children":299},{},[300],{"type":18,"value":301},"Kbuild将编译分成了2个阶段",{"type":13,"tag":47,"props":303,"children":304},{},[305,310],{"type":13,"tag":51,"props":306,"children":307},{},[308],{"type":18,"value":309},"告诉Kbuild存在哪些可执行文件。通过变量hostprogs-y来完成的。",{"type":13,"tag":51,"props":311,"children":312},{},[313],{"type":18,"value":314},"添加一个对可执行文件的显性依赖。（通过增加依赖关系到一个规则中，或是利用$(always)）",{"type":13,"tag":26,"props":316,"children":317},{},[318,320],{"type":18,"value":319},"$(",{"type":13,"tag":321,"props":322,"children":323},"executeable",{},[324],{"type":18,"value":325},"-objs) 列出了联接成最后的可执行文件所需的所有目标文件。",{"type":13,"tag":214,"props":327,"children":329},{"id":328},"定义共享库",[330],{"type":18,"value":328},{"type":13,"tag":26,"props":332,"children":333},{},[334],{"type":18,"value":335},"扩展名为 so 的文件称为共享库，被编译成位置无关对象。",{"type":13,"tag":26,"props":337,"children":338},{},[339],{"type":18,"value":340},"共享库文件经常要求一个相应的 -objs，",{"type":13,"tag":26,"props":342,"children":343},{},[344],{"type":18,"value":345},"程序经常是利用$(HOSTCC)编译,其选项在 $(HOSTCFLAGS)变量中。可通过使用变量 HOST＿EXTRACFLAGS，影响所有在 Makefile 文件中要创建的主机程序。",{"type":13,"tag":193,"props":347,"children":349},{"id":348},"构建makefile",[350],{"type":18,"value":351},"构建Makefile",{"type":13,"tag":26,"props":353,"children":354},{},[355],{"type":18,"value":356},"Kbuild 执行的几个步骤",{"type":13,"tag":47,"props":358,"children":359},{},[360,365,370,375,380,385,390],{"type":13,"tag":51,"props":361,"children":362},{},[363],{"type":18,"value":364},"根据内核配置生产文件.config",{"type":13,"tag":51,"props":366,"children":367},{},[368],{"type":18,"value":369},"将内核的版本号存储在include/linux/version.h",{"type":13,"tag":51,"props":371,"children":372},{},[373],{"type":18,"value":374},"生产指向include/asm-$(ARCH)的符号链接",{"type":13,"tag":51,"props":376,"children":377},{},[378],{"type":18,"value":379},"更新所有编译所需的文件：附加的文件由arch/$(ARCH)/Makefile指定",{"type":13,"tag":51,"props":381,"children":382},{},[383],{"type":18,"value":384},"递归向下访问所有在下列变量中列出的目录 init-* core* drivers-* net-* libs-*,并编译生成目标文件。这些变量的值可以再arch/$(ARCH)/Makefile中扩充。",{"type":13,"tag":51,"props":386,"children":387},{},[388],{"type":18,"value":389},"链接所有的目标文件，在源代码树顶层目录中生成vmlinux。最先链接是在head-y中列出的文件，该变量由arch/$(ARCH)/Makefile赋值",{"type":13,"tag":51,"props":391,"children":392},{},[393],{"type":18,"value":394},"最后完成具体架构的特殊要求，并生成最终的启动镜像（ 包含生成启动指令， 准备 initrd 镜像或类似文件）",{"type":13,"tag":214,"props":396,"children":398},{"id":397},"针对具体架构的调整",[399],{"type":18,"value":397},{"type":13,"tag":199,"props":401,"children":403},{"code":402},"LDFLAGS 一般是$(LD)选项\nLDFLAGS_Module 链接模块时的链接器选项，在链接模块.ko文件使用\nLDFLAGS_vmlinux 用来链接vmlinux时使用\n\nOBJCOMPYFLAGS objcopy选项\n$(call if_changed,objcopy) 经常被用来为 vmlinux 生成原始的二进制代码\n\nAFLAGS $(AS) 汇编编译器选项\n\nCFLAGS $(CC) 编译器选项\n\n$(CFLAGS_KERNEL) 包含了用于编译常驻内核代码的附加编译器选项。\n\n$(CFLAGS_MODULE) 包含了用于编译可装载模块的附加编译器选项。\n\narchprepare 规则在递归访问子目录之前，列出编译目标文件所需文件。\n\n",[404],{"type":13,"tag":204,"props":405,"children":406},{"__ignoreMap":7},[407],{"type":18,"value":402},{"type":13,"tag":214,"props":409,"children":411},{"id":410},"自定义kbuild命令",[412],{"type":18,"value":410},{"type":13,"tag":199,"props":414,"children":416},{"code":415},"    当 Kbuild 的变量 KBUILD_VERBOSE 为 0 时，只会显示命令的简写。\n    如果要为自定义命令使用这一功能，需要设置 2 个变量：\n    quiet_cmd_\u003Ccommand> - 要显示的命令\n    cmd_\u003Ccommand> - 要执行的命令\n",[417],{"type":13,"tag":204,"props":418,"children":419},{"__ignoreMap":7},[420],{"type":18,"value":415},{"title":7,"searchDepth":422,"depth":422,"links":423},2,[424,425,426],{"id":22,"depth":422,"text":22},{"id":42,"depth":422,"text":45},{"id":93,"depth":422,"text":96,"children":427},[428,430,431],{"id":195,"depth":429,"text":195},3,{"id":294,"depth":429,"text":294},{"id":348,"depth":429,"text":351},"markdown","content:blog:linux:kbuild.md","content","blog/linux/kbuild.md","md",1718158598645]