[{"data":1,"prerenderedAt":383},["Reactive",2],{"content-query-77XKv4uLY7":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":378,"_id":379,"_source":380,"_file":381,"_extension":382},"/blog/ovirt/engine/maven","engine",false,"","ovirt-engine maven",{"type":10,"children":11,"toc":368},"root",[12,20,26,32,37,42,100,112,117,122,142,147,157,163,168,176,181,190,194,199,344,349,354],{"type":13,"tag":14,"props":15,"children":17},"element","h1",{"id":16},"ovirt-engine-maven",[18],{"type":19,"value":8},"text",{"type":13,"tag":21,"props":22,"children":24},"h2",{"id":23},"前言",[25],{"type":19,"value":23},{"type":13,"tag":27,"props":28,"children":29},"p",{},[30],{"type":19,"value":31},"ovirt-engine是一个由maven组织起来java项目，其中也包括makefile、package或otopi plugin等其他手段来协助完成打包、验证、开发环境准备、初始化等工作，但主要的是maven，在分析梳理项目或导入项目的时候都可以以pom.xml为入口。一个大型项目通常都是由几个小项目或者模块组成的，通过pom.xml定义的关系和包含的mvn plugin可以快速的了解每个子项目的作用从而理解整个项目。",{"type":13,"tag":27,"props":33,"children":34},{},[35],{"type":19,"value":36},"例如来make install-dev中出现错误的时候，一般应当找到对应报错的maven项目，切换到该项目目录，分析出错的maven命令的原因，这样就可以了解深层次的错误原因而不是看到报错一筹莫展。",{"type":13,"tag":21,"props":38,"children":40},{"id":39},"maven",[41],{"type":19,"value":39},{"type":13,"tag":27,"props":43,"children":44},{},[45,47,56,58,65,66,73,74,81,82,89,91,98],{"type":19,"value":46},"maven的学习资料比较多，可以通过阅读",{"type":13,"tag":48,"props":49,"children":53},"a",{"href":50,"rel":51},"https://segmentfault.com/a/1190000014136187",[52],"nofollow",[54],{"type":19,"value":55},"参考1",{"type":19,"value":57},"、",{"type":13,"tag":48,"props":59,"children":62},{"href":60,"rel":61},"https://juejin.im/entry/5b0fa70af265da090e3df499",[52],[63],{"type":19,"value":64},"参考2",{"type":19,"value":57},{"type":13,"tag":48,"props":67,"children":70},{"href":68,"rel":69},"http://jolestar.com/dependency-management-tools-maven-gradle/",[52],[71],{"type":19,"value":72},"参考3",{"type":19,"value":57},{"type":13,"tag":48,"props":75,"children":78},{"href":76,"rel":77},"http://www.cnblogs.com/davenkin/p/advanced-maven-multi-module-vs-inheritance.html",[52],[79],{"type":19,"value":80},"参考4",{"type":19,"value":57},{"type":13,"tag":48,"props":83,"children":86},{"href":84,"rel":85},"http://maven.apache.org/guides/getting-started/index.html",[52],[87],{"type":19,"value":88},"官网",{"type":19,"value":90},"和",{"type":13,"tag":48,"props":92,"children":95},{"href":93,"rel":94},"https://item.jd.com/10476794.html",[52],[96],{"type":19,"value":97},"书",{"type":19,"value":99},"来学习。",{"type":13,"tag":27,"props":101,"children":102},{},[103,105],{"type":19,"value":104},"个人感觉可以和npm类比的学习",{"type":13,"tag":48,"props":106,"children":109},{"href":107,"rel":108},"https://codeday.me/bug/20181204/432991.html",[52],[110],{"type":19,"value":111},"参考5",{"type":13,"tag":27,"props":113,"children":114},{},[115],{"type":19,"value":116},"maven本只提供了一个执行环境，真正的操作项目的是由插件来执行的，例如编译java的compile插件、打包的jar插件等等。在安装完maven后会有内置的默认插件，全部定义在所有maven都需要集成的Super Pom里面。",{"type":13,"tag":27,"props":118,"children":119},{},[120],{"type":19,"value":121},"除了maven默认插件之外，熟练使用丰富的外部 plugin是学习maven的另一个重点。",{"type":13,"tag":27,"props":123,"children":124},{},[125,127,133,135,140],{"type":19,"value":126},"每个plugin都可以通过mvn ",{"type":13,"tag":128,"props":129,"children":130},"span",{},[131],{"type":19,"value":132},"plugin",{"type":19,"value":134},":",{"type":13,"tag":128,"props":136,"children":137},{},[138],{"type":19,"value":139},"action",{"type":19,"value":141},"的方式使用其提供的服务。",{"type":13,"tag":27,"props":143,"children":144},{},[145],{"type":19,"value":146},"例如tomcat-maven-plugin：",{"type":13,"tag":148,"props":149,"children":151},"pre",{"code":150},"mvn tomcat:deploy   --部署一个web war包\nmvn tomcat:reload   --重新加载web war包\nmvn tomcat:start    --启动tomcat\nmvn tomcat:stop    --停止tomcat\nmvn tomcat:undeploy --停止一个war包\nmvn tomcat:run  --启动嵌入式tomcat ，并运行当前项目\n",[152],{"type":13,"tag":153,"props":154,"children":155},"code",{"__ignoreMap":7},[156],{"type":19,"value":150},{"type":13,"tag":21,"props":158,"children":160},{"id":159},"pomxml",[161],{"type":19,"value":162},"pom.xml",{"type":13,"tag":27,"props":164,"children":165},{},[166],{"type":19,"value":167},"在engine项目中的root pom.xml中定义了5个module，",{"type":13,"tag":148,"props":169,"children":171},{"code":170},"build-tools-root： 包含静态检查的一些通用规则配置文件,如checkstyle\\findbugs\nbackend：   后台业务逻辑代码\nfrontend:   前台业务逻辑代码\near：          定义jboss运行时的内外部依赖和业务逻辑代码中不同子项目的打包方式、URL映射关系\nmavenmake:      执行make install-dev\n",[172],{"type":13,"tag":153,"props":173,"children":174},{"__ignoreMap":7},[175],{"type":19,"value":170},{"type":13,"tag":27,"props":177,"children":178},{},[179],{"type":19,"value":180},"详细分析见下图:",{"type":13,"tag":27,"props":182,"children":183},{},[184],{"type":13,"tag":185,"props":186,"children":189},"img",{"alt":187,"src":188},"ovirt-engine-maven-pom","https://github.com/ShaneDean/file/raw/eb68d3da19b6bb1d293900288228650ee4b43f9b/blog/ovirt_engine_env/ovirt-engine-maven-pom.png",[],{"type":13,"tag":21,"props":191,"children":192},{"id":132},[193],{"type":19,"value":132},{"type":13,"tag":27,"props":195,"children":196},{},[197],{"type":19,"value":198},"engine中各个项目中用到的插件汇总如下：",{"type":13,"tag":200,"props":201,"children":202},"ul",{},[203,209,214,219,224,229,234,239,244,249,254,259,264,269,274,279,284,289,294,299,304,309,314,319,324,329,334,339],{"type":13,"tag":204,"props":205,"children":206},"li",{},[207],{"type":19,"value":208},"maven-resources-plugin",{"type":13,"tag":204,"props":210,"children":211},{},[212],{"type":19,"value":213},"maven-surefire-plugin",{"type":13,"tag":204,"props":215,"children":216},{},[217],{"type":19,"value":218},"maven-ejb-plugin",{"type":13,"tag":204,"props":220,"children":221},{},[222],{"type":19,"value":223},"maven-source-plugin",{"type":13,"tag":204,"props":225,"children":226},{},[227],{"type":19,"value":228},"maven-checkstyle-plugin",{"type":13,"tag":204,"props":230,"children":231},{},[232],{"type":19,"value":233},"maven-enforcer-plugin",{"type":13,"tag":204,"props":235,"children":236},{},[237],{"type":19,"value":238},"maven-war-plugin",{"type":13,"tag":204,"props":240,"children":241},{},[242],{"type":19,"value":243},"maven-deploy-plugin",{"type":13,"tag":204,"props":245,"children":246},{},[247],{"type":19,"value":248},"maven-javadoc-plugin",{"type":13,"tag":204,"props":250,"children":251},{},[252],{"type":19,"value":253},"ovirt-jboss-modules-maven-plugin",{"type":13,"tag":204,"props":255,"children":256},{},[257],{"type":19,"value":258},"maven-compiler-plugin",{"type":13,"tag":204,"props":260,"children":261},{},[262],{"type":19,"value":263},"findbugs-maven-plugin",{"type":13,"tag":204,"props":265,"children":266},{},[267],{"type":19,"value":268},"maven-shade-plugin",{"type":13,"tag":204,"props":270,"children":271},{},[272],{"type":19,"value":273},"maven-dependency-plugin",{"type":13,"tag":204,"props":275,"children":276},{},[277],{"type":19,"value":278},"exec-maven-plugin",{"type":13,"tag":204,"props":280,"children":281},{},[282],{"type":19,"value":283},"maven-jaxb22-plugin",{"type":13,"tag":204,"props":285,"children":286},{},[287],{"type":19,"value":288},"build-helper-maven-plugin",{"type":13,"tag":204,"props":290,"children":291},{},[292],{"type":19,"value":293},"maven-antrun-plugin",{"type":13,"tag":204,"props":295,"children":296},{},[297],{"type":19,"value":298},"libsass-maven-plugin",{"type":13,"tag":204,"props":300,"children":301},{},[302],{"type":19,"value":303},"gwt-maven-plugin",{"type":13,"tag":204,"props":305,"children":306},{},[307],{"type":19,"value":308},"maven-processor-plugin",{"type":13,"tag":204,"props":310,"children":311},{},[312],{"type":19,"value":313},"maven-clean-plugin",{"type":13,"tag":204,"props":315,"children":316},{},[317],{"type":19,"value":318},"lifecycle-mapping",{"type":13,"tag":204,"props":320,"children":321},{},[322],{"type":19,"value":323},"maven-ear-plugin",{"type":13,"tag":204,"props":325,"children":326},{},[327],{"type":19,"value":328},"taglist-maven-plugin",{"type":13,"tag":204,"props":330,"children":331},{},[332],{"type":19,"value":333},"maven-jar-plugin",{"type":13,"tag":204,"props":335,"children":336},{},[337],{"type":19,"value":338},"maven-assembly-plugin",{"type":13,"tag":204,"props":340,"children":341},{},[342],{"type":19,"value":343},"animal-sniffer-maven-plugin",{"type":13,"tag":345,"props":346,"children":347},"h3",{"id":253},[348],{"type":19,"value":253},{"type":13,"tag":27,"props":350,"children":351},{},[352],{"type":19,"value":353},"这是ovirt项目团队写的一个maven插件，This plugin is intended to simplify the creation of JBoss Modules in Maven projects.",{"type":13,"tag":27,"props":355,"children":356},{},[357,359,366],{"type":19,"value":358},"ovirt-engine使用是jdk1.8，java的原生module是在9才出现。JBOSS自己实现了一套module的机制，需要通过module.xml的文件来声明模块的依赖和资源。",{"type":13,"tag":48,"props":360,"children":363},{"href":361,"rel":362},"https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.1/html-single/development_guide/index#class_loading_and_modules",[52],[364],{"type":19,"value":365},"jboss-module-参考资料",{"type":19,"value":367},"，在engine里面的",{"title":7,"searchDepth":369,"depth":369,"links":370},2,[371,372,373,374],{"id":23,"depth":369,"text":23},{"id":39,"depth":369,"text":39},{"id":159,"depth":369,"text":162},{"id":132,"depth":369,"text":132,"children":375},[376],{"id":253,"depth":377,"text":253},3,"markdown","content:blog:ovirt:engine:maven.md","content","blog/ovirt/engine/maven.md","md",1718158598649]