[{"data":1,"prerenderedAt":1151},["Reactive",2],{"content-query-LvqeHCPK8m":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":1146,"_id":1147,"_source":1148,"_file":1149,"_extension":1150},"/blog/otopi/analyze","otopi",false,"","otopi源码分析",{"type":10,"children":11,"toc":1130},"root",[12,19,25,42,46,51,56,66,71,112,117,123,128,137,142,147,152,157,162,170,175,183,188,195,200,229,234,239,247,255,260,265,271,276,281,289,294,299,307,312,320,325,333,338,346,351,356,361,369,374,431,436,441,449,454,462,467,472,477,489,497,502,507,515,520,525,548,554,559,565,570,578,583,591,602,669,674,679,687,692,700,710,716,725,730,735,743,748,759,764,774,786,791,796,804,809,817,822,827,832,844,849,854,862,867,872,885,891,896,901,909,914,922,927,935,940,948,953,961,966,974,979,987,992,1000,1005,1013,1018,1026,1031,1039,1044,1052,1057,1065,1070,1078,1083,1091,1096,1104,1109,1117,1122],{"type":13,"tag":14,"props":15,"children":16},"element","h1",{"id":8},[17],{"type":18,"value":8},"text",{"type":13,"tag":20,"props":21,"children":23},"h2",{"id":22},"前言",[24],{"type":18,"value":22},{"type":13,"tag":26,"props":27,"children":28},"p",{},[29,31,40],{"type":18,"value":30},"本文以otopi源码的文档和参考资料",{"type":13,"tag":32,"props":33,"children":37},"a",{"href":34,"rel":35},"https://resources.ovirt.org/old-site-files/wiki/Ovirt-host-deploy_3.2.pdf",[36],"nofollow",[38],{"type":18,"value":39},"Ovirt-host-deloy_3.2.pdf",{"type":18,"value":41},"为输入，用自己的语言来组织下对otopi的理解和使用。",{"type":13,"tag":20,"props":43,"children":44},{"id":5},[45],{"type":18,"value":5},{"type":13,"tag":26,"props":47,"children":48},{},[49],{"type":18,"value":50},"全名 oVirt Task Oriented Pluggable Installer/Implementation",{"type":13,"tag":26,"props":52,"children":53},{},[54],{"type":18,"value":55},"基于独立插件的安装框架，可以用来设置系统环境。使用插件的性质尽可能的简化安装新功能的难度，摆脱状态和事务管理的复杂性。",{"type":13,"tag":57,"props":58,"children":60},"pre",{"code":59},"// fixme  状态和事务管理的复杂性在哪里？为什么插件管理简单？\n",[61],{"type":13,"tag":62,"props":63,"children":64},"code",{"__ignoreMap":7},[65],{"type":18,"value":59},{"type":13,"tag":26,"props":67,"children":68},{},[69],{"type":18,"value":70},"具有如下特点",{"type":13,"tag":72,"props":73,"children":74},"ol",{},[75,81,86,91,96,101],{"type":13,"tag":76,"props":77,"children":78},"li",{},[79],{"type":18,"value":80},"模块化、面向任务的库实现",{"type":13,"tag":76,"props":82,"children":83},{},[84],{"type":18,"value":85},"支持可插拔管理器的对话框协议，用于人机对话",{"type":13,"tag":76,"props":87,"children":88},{},[89],{"type":18,"value":90},"本地化支持",{"type":13,"tag":76,"props":92,"children":93},{},[94],{"type":18,"value":95},"支持本地和远程模式执行",{"type":13,"tag":76,"props":97,"children":98},{},[99],{"type":18,"value":100},"分布式独立实现",{"type":13,"tag":76,"props":102,"children":103},{},[104,106,110],{"type":18,"value":105},"兼容python 2.6 2.7 3.2",{"type":13,"tag":107,"props":108,"children":109},"br",{},[],{"type":18,"value":111},"// fixme 这6点分别对应的是哪些代码?",{"type":13,"tag":26,"props":113,"children":114},{},[115],{"type":18,"value":116},"留些问题，回头来看。",{"type":13,"tag":118,"props":119,"children":121},"h3",{"id":120},"安装顺序",[122],{"type":18,"value":120},{"type":13,"tag":26,"props":124,"children":125},{},[126],{"type":18,"value":127},"开放把提供的插件放到插件组中，每个插件需要使用@plugin.event来注册，需要提供阶段和优先级信息，每个插件可以提供用于检查条件的回调。状态管理是通过k/v的Environment来实现。",{"type":13,"tag":26,"props":129,"children":130},{},[131],{"type":13,"tag":132,"props":133,"children":136},"img",{"alt":134,"src":135},"install_sequence","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_installation_sequence.png?raw=true",[],{"type":13,"tag":26,"props":138,"children":139},{},[140],{"type":18,"value":141},"Environment中的k/v值有三个来源，默认值、初始化之、通过Config文件覆盖的值。",{"type":13,"tag":26,"props":143,"children":144},{},[145],{"type":18,"value":146},"在plugin.py文件中定义了18个阶段，他们的进入顺序如图中箭头所示。",{"type":13,"tag":26,"props":148,"children":149},{},[150],{"type":18,"value":151},"每个阶段定义了7个默认的优先级，数字越小优先级越高，最后执行插件方法排序的依据是优先级数字的大小，所以每个插件在传入PRIORITY_X的时候可以做+/-运算来调整执行顺序。",{"type":13,"tag":118,"props":153,"children":155},{"id":154},"插件组",[156],{"type":18,"value":154},{"type":13,"tag":26,"props":158,"children":159},{},[160],{"type":18,"value":161},"所有插件都由插件组来划分，可以通过ENVIRONMENT来传递给otopi，接下来Otopi会去加载${group_name}下的插件。",{"type":13,"tag":57,"props":163,"children":165},{"code":164},"APPEND:BASE/pluginGroups=str:${group_name}\n",[166],{"type":13,"tag":62,"props":167,"children":168},{"__ignoreMap":7},[169],{"type":18,"value":164},{"type":13,"tag":26,"props":171,"children":172},{},[173],{"type":18,"value":174},"文件结构如下：",{"type":13,"tag":26,"props":176,"children":177},{},[178],{"type":13,"tag":132,"props":179,"children":182},{"alt":180,"src":181},"image","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/ovirt_engine_packages_setup_plugins_list.png?raw=true",[],{"type":13,"tag":26,"props":184,"children":185},{},[186],{"type":18,"value":187},"如其中ovirt-engine-common就是plugin groups，core文件夹下面的_ _ init__.py文件里面定义了core目录中包含了多少plugin. 如下图",{"type":13,"tag":26,"props":189,"children":190},{},[191],{"type":13,"tag":132,"props":192,"children":194},{"alt":180,"src":193},"https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/ovirt_engine_packages_setup_plugins_plugin_createPlugins.png?raw=true",[],{"type":13,"tag":26,"props":196,"children":197},{},[198],{"type":18,"value":199},"定义了5个plugin",{"type":13,"tag":201,"props":202,"children":203},"ul",{},[204,209,214,219,224],{"type":13,"tag":76,"props":205,"children":206},{},[207],{"type":18,"value":208},"firewall_manager",{"type":13,"tag":76,"props":210,"children":211},{},[212],{"type":18,"value":213},"firewall_ mamager_firewalld",{"type":13,"tag":76,"props":215,"children":216},{},[217],{"type":18,"value":218},"firewall_ manager_human",{"type":13,"tag":76,"props":220,"children":221},{},[222],{"type":18,"value":223},"firewall_ manager_iptables",{"type":13,"tag":76,"props":225,"children":226},{},[227],{"type":18,"value":228},"hostname",{"type":13,"tag":26,"props":230,"children":231},{},[232],{"type":18,"value":233},"所有Plugin都继承自PluginBase并使用@Plugin.event注解来声明该插件所在的流程位置，python模块可以使用createPlugins方法来加载插件。",{"type":13,"tag":26,"props":235,"children":236},{},[237],{"type":18,"value":238},"下面是一个示例，假设写了plugin example1 在group1里面",{"type":13,"tag":57,"props":240,"children":242},{"code":241},"//__init__.py\nfrom otopi import util\n\nfrom . import example1\n\n@util.export\ndef createPlugins(context):\n    example1.Plugin(context=context)\n",[243],{"type":13,"tag":62,"props":244,"children":245},{"__ignoreMap":7},[246],{"type":18,"value":241},{"type":13,"tag":57,"props":248,"children":250},{"code":249},"//example1.py\nimport platform\nimport gettext\n_ = lambda m: gettext.dgettext(message=m, domain='otopi')\n\n\nfrom otopi import constants\nfrom otopi import util\nfrom otopi import plugin\nfrom otopi import filetransaction\n\n\n@util.export\nclass Plugin(plugin.PluginBase):\n\n    def __init__(self, context):\n        super(Plugin, self).__init__(context=context)\n\n    #\n    # 使用默认的优先级注册到STAGE_INIT阶段\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_INIT,\n    )\n    def _init(self):\n\n        #\n        # 使用默认值来保持现存的ENVIRONMENT\n        #\n        self.environment.setdefault('var1', False)\n\n    #\n    # 执行验证，修改的最后机会\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_VALIDATION,\n        priority=plugin.Stages.PRIORITY_LOW,\n    )\n    def _validate(self):\n        if not self._distribution in ('redhat', 'fedora'):\n            raise RuntimeError(\n                _('Unsupported distribution for iptables plugin')\n            )\n\n    #\n    # 执行插件的对应工作.\n    #\n    @plugin.event(\n        stage=plugin.Stages.STAGE_MISC,\n        condition=lambda self: self.environment['var1'],\n    )\n    def _store_iptables(self):\n            self.environment[constants.CoreEnv.TRANSACTION].append(\n                filetransaction.FileTransaction(\n                    name='/etc/example1.conf',\n                    content=(\n                        'hello',\n                        'world',\n                    )\n                )\n            )\n\n@util.export\ndef createPlugins(context):\n    Plugin(context=context)\n\n",[251],{"type":13,"tag":62,"props":252,"children":253},{"__ignoreMap":7},[254],{"type":18,"value":249},{"type":13,"tag":118,"props":256,"children":258},{"id":257},"环境",[259],{"type":18,"value":257},{"type":13,"tag":26,"props":261,"children":262},{},[263],{"type":18,"value":264},"环境包含两个部分 系统变量和安装环境变量",{"type":13,"tag":266,"props":267,"children":269},"h4",{"id":268},"系统变量",[270],{"type":18,"value":268},{"type":13,"tag":26,"props":272,"children":273},{},[274],{"type":18,"value":275},"可以用来覆盖安装环境变量，一般用来调试。",{"type":13,"tag":26,"props":277,"children":278},{},[279],{"type":18,"value":280},"选取几个变量",{"type":13,"tag":57,"props":282,"children":284},{"code":283},"    OTOPI_CONFIG\n        配置文件\n        覆盖了 安装环境的CORE/configFileName.\n\n    OTOPI_DEBUG\n        是否开启调试特性，0表示关闭\n        覆盖了 安装环境的BASE/debug.\n    \n    OTOPI_LOGDIR\n        日志目录\n        覆盖了安装环境的CORE/logDir.\n    \n    OTOPI_LOGFILE\n        指定了日志文件\n        覆盖了安装环境的CORE/logFileName.\n",[285],{"type":13,"tag":62,"props":286,"children":287},{"__ignoreMap":7},[288],{"type":18,"value":283},{"type":13,"tag":266,"props":290,"children":292},{"id":291},"安装环境变量",[293],{"type":18,"value":291},{"type":13,"tag":26,"props":295,"children":296},{},[297],{"type":18,"value":298},"在constants.py中定义了所有的插件变量",{"type":13,"tag":26,"props":300,"children":301},{},[302],{"type":13,"tag":132,"props":303,"children":306},{"alt":304,"src":305},"otopi_installer_environment_constants_py_variables","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_installer_environment_constants_py_variables.png?raw=true",[],{"type":13,"tag":26,"props":308,"children":309},{},[310],{"type":18,"value":311},"其中两个注解的意思是",{"type":13,"tag":57,"props":313,"children":315},{"code":314},"@util.export    //导出该类\n@util.codegen   //将下面变量定义成class的可访问属性\n",[316],{"type":13,"tag":62,"props":317,"children":318},{"__ignoreMap":7},[319],{"type":18,"value":314},{"type":13,"tag":26,"props":321,"children":322},{},[323],{"type":18,"value":324},"上图中定义的变量都可以通过import的方式被plugin访问引用，从而影响plugin的行为，而且更进一步让ovirt-engine通过otopi提供的MachineDialogParser类来与变量交互。",{"type":13,"tag":26,"props":326,"children":327},{},[328],{"type":13,"tag":132,"props":329,"children":332},{"alt":330,"src":331},"netenv_ssh","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_ovirt_engine_set_NetEnv_SSH_USER.png?raw=ture",[],{"type":13,"tag":26,"props":334,"children":335},{},[336],{"type":18,"value":337},"参考几个关键的Environment",{"type":13,"tag":57,"props":339,"children":341},{"code":340},"\n    BASE/pluginGroups(str)\n        通过 \":\"来切分的插件组\n    CORE/configFileName(str) [/etc/otopi.conf]\n        默认路径是/etc/otopi.conf的配置文件\n    NETWORK/sshEnable(bool) [False]\n        是否存储ssh的密钥，默认不存。\n    NETWORK/iptablesRules(multi-str)\n        iptables的过滤规则，多条str\n",[342],{"type":13,"tag":62,"props":343,"children":344},{"__ignoreMap":7},[345],{"type":18,"value":340},{"type":13,"tag":118,"props":347,"children":349},{"id":348},"对话框",[350],{"type":18,"value":348},{"type":13,"tag":26,"props":352,"children":353},{},[354],{"type":18,"value":355},"dialog是plugins用来和外部交互的接口。交互的对象包括Human和Machine类。",{"type":13,"tag":26,"props":357,"children":358},{},[359],{"type":18,"value":360},"我的理解是：",{"type":13,"tag":57,"props":362,"children":364},{"code":363},"human的交互模式就是 command line interactive mode\n\nmachine的交互模式就是answer file mode\n",[365],{"type":13,"tag":62,"props":366,"children":367},{"__ignoreMap":7},[368],{"type":18,"value":363},{"type":13,"tag":26,"props":370,"children":371},{},[372],{"type":18,"value":373},"支持的交互包括",{"type":13,"tag":201,"props":375,"children":376},{},[377,382,387,410,426],{"type":13,"tag":76,"props":378,"children":379},{},[380],{"type":18,"value":381},"terminate",{"type":13,"tag":76,"props":383,"children":384},{},[385],{"type":18,"value":386},"note",{"type":13,"tag":76,"props":388,"children":389},{},[390,392],{"type":18,"value":391},"queries\n",{"type":13,"tag":201,"props":393,"children":394},{},[395,400,405],{"type":13,"tag":76,"props":396,"children":397},{},[398],{"type":18,"value":399},"string",{"type":13,"tag":76,"props":401,"children":402},{},[403],{"type":18,"value":404},"multi-string",{"type":13,"tag":76,"props":406,"children":407},{},[408],{"type":18,"value":409},"value",{"type":13,"tag":76,"props":411,"children":412},{},[413,415],{"type":18,"value":414},"display\n",{"type":13,"tag":201,"props":416,"children":417},{},[418,422],{"type":13,"tag":76,"props":419,"children":420},{},[421],{"type":18,"value":404},{"type":13,"tag":76,"props":423,"children":424},{},[425],{"type":18,"value":409},{"type":13,"tag":76,"props":427,"children":428},{},[429],{"type":18,"value":430},"confirm",{"type":13,"tag":266,"props":432,"children":434},{"id":433},"定制和结束对话框",[435],{"type":18,"value":433},{"type":13,"tag":26,"props":437,"children":438},{},[439],{"type":18,"value":440},"在启动otopi之前传入DIALOG/customization=bool:Ture，可以开启comman 交互模式，这个模式下会有一些简单的命令可以使用，如下",{"type":13,"tag":57,"props":442,"children":444},{"code":443},"abort - Abort process\nenv-get - Get environment variable\nenv-query - Query environment variable\nenv-query-multi - Get multi string environment variable\nenv-set - Set environment variable\nenv-show - Display environment\nexception-show - show exception information\nhelp - Display available commands\ninstall - Install software\nlog - Retrieve log file\nnoop - No operation\nquit - Quit\n\n",[445],{"type":13,"tag":62,"props":446,"children":447},{"__ignoreMap":7},[448],{"type":18,"value":443},{"type":13,"tag":26,"props":450,"children":451},{},[452],{"type":18,"value":453},"可以通过这些命令来操作environment，一般在每个stages的定制和结束前可以执行。效果如下图",{"type":13,"tag":26,"props":455,"children":456},{},[457],{"type":13,"tag":132,"props":458,"children":461},{"alt":459,"src":460},"otopi_dialog_customization","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_dialog_customization_true.png?raw=true",[],{"type":13,"tag":118,"props":463,"children":465},{"id":464},"bundle",[466],{"type":18,"value":464},{"type":13,"tag":26,"props":468,"children":469},{},[470],{"type":18,"value":471},"略",{"type":13,"tag":20,"props":473,"children":475},{"id":474},"源码分析",[476],{"type":18,"value":474},{"type":13,"tag":26,"props":478,"children":479},{},[480,482],{"type":18,"value":481},"otopi属于Ovirt下的一个子项目，开发仓库",{"type":13,"tag":32,"props":483,"children":486},{"href":484,"rel":485},"https://gerrit.ovirt.org/",[36],[487],{"type":18,"value":488},"gerrit",{"type":13,"tag":57,"props":490,"children":492},{"code":491},"    git clone https://gerrit.ovirt.org/otopi\n",[493],{"type":13,"tag":62,"props":494,"children":495},{"__ignoreMap":7},[496],{"type":18,"value":491},{"type":13,"tag":118,"props":498,"children":500},{"id":499},"安装",[501],{"type":18,"value":499},{"type":13,"tag":26,"props":503,"children":504},{},[505],{"type":18,"value":506},"项目文档中提供了INSTALL",{"type":13,"tag":57,"props":508,"children":510},{"code":509},"    autoreconf -ivf\n    ./configure\n    make\n    make install\n",[511],{"type":13,"tag":62,"props":512,"children":513},{"__ignoreMap":7},[514],{"type":18,"value":509},{"type":13,"tag":118,"props":516,"children":518},{"id":517},"目录",[519],{"type":18,"value":517},{"type":13,"tag":26,"props":521,"children":522},{},[523],{"type":18,"value":524},"核心的内容在一下四个目录",{"type":13,"tag":201,"props":526,"children":527},{},[528,533,538,543],{"type":13,"tag":76,"props":529,"children":530},{},[531],{"type":18,"value":532},"src/bin   otopi命令入口脚本",{"type":13,"tag":76,"props":534,"children":535},{},[536],{"type":18,"value":537},"src/java  otopi提供给外部Java程序和Environment交互的工具jar包的源码",{"type":13,"tag":76,"props":539,"children":540},{},[541],{"type":18,"value":542},"src/otopi otopi架构的核心代码",{"type":13,"tag":76,"props":544,"children":545},{},[546],{"type":18,"value":547},"src/plugins/otopi otopi内置的插件，外部在使用otopi来实现安装过程中会默认加载这些插件",{"type":13,"tag":266,"props":549,"children":551},{"id":550},"binotopi",[552],{"type":18,"value":553},"bin/otopi",{"type":13,"tag":26,"props":555,"children":556},{},[557],{"type":18,"value":558},"这个脚本在完成必要的 环境检查（bundle\\root\\ptyon-version)之后进入otopi._ _ main__中",{"type":13,"tag":266,"props":560,"children":562},{"id":561},"srcotopi",[563],{"type":18,"value":564},"src/otopi",{"type":13,"tag":26,"props":566,"children":567},{},[568],{"type":18,"value":569},"梳理下otopi运行的核心代码的流程如下图",{"type":13,"tag":26,"props":571,"children":572},{},[573],{"type":13,"tag":132,"props":574,"children":577},{"alt":575,"src":576},"otopi_code_process_flow","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_core_code_process_flow.png?raw=true",[],{"type":13,"tag":26,"props":579,"children":580},{},[581],{"type":18,"value":582},"可以简单分成两部分：",{"type":13,"tag":57,"props":584,"children":586},{"code":585},"\n    installer =main.Otopi() //开始进行初始化工作。\n    \n    installer.execute() //根据传入的参数开始执行对应的业务。\n    \n",[587],{"type":13,"tag":62,"props":588,"children":589},{"__ignoreMap":7},[590],{"type":18,"value":585},{"type":13,"tag":26,"props":592,"children":593},{},[594,600],{"type":13,"tag":595,"props":596,"children":597},"strong",{},[598],{"type":18,"value":599},"初始化部",{"type":18,"value":601},"分可以看到，otopi主要包含了4个对象:",{"type":13,"tag":201,"props":603,"children":604},{},[605,623,646,664],{"type":13,"tag":76,"props":606,"children":607},{},[608,610],{"type":18,"value":609},"Dialog\n",{"type":13,"tag":201,"props":611,"children":612},{},[613,618],{"type":13,"tag":76,"props":614,"children":615},{},[616],{"type":18,"value":617},"humam",{"type":13,"tag":76,"props":619,"children":620},{},[621],{"type":18,"value":622},"machineDialog",{"type":13,"tag":76,"props":624,"children":625},{},[626,628],{"type":18,"value":627},"Services\n",{"type":13,"tag":201,"props":629,"children":630},{},[631,636,641],{"type":13,"tag":76,"props":632,"children":633},{},[634],{"type":18,"value":635},"rhel",{"type":13,"tag":76,"props":637,"children":638},{},[639],{"type":18,"value":640},"openrc",{"type":13,"tag":76,"props":642,"children":643},{},[644],{"type":18,"value":645},"systemd",{"type":13,"tag":76,"props":647,"children":648},{},[649,651],{"type":18,"value":650},"Packager\n",{"type":13,"tag":201,"props":652,"children":653},{},[654,659],{"type":13,"tag":76,"props":655,"children":656},{},[657],{"type":18,"value":658},"dnfpackager",{"type":13,"tag":76,"props":660,"children":661},{},[662],{"type":18,"value":663},"yumpackager",{"type":13,"tag":76,"props":665,"children":666},{},[667],{"type":18,"value":668},"Command",{"type":13,"tag":26,"props":670,"children":671},{},[672],{"type":18,"value":673},"除了command外其他都属于虚类，具体实现由子项中的子类来实现。在otopi的初始化阶段，context只保存虚类，所有子类全部由插件的方式提供，该子类插件的对应阶段执行时，执行响应的context.registerXXXXX()方法。",{"type":13,"tag":26,"props":675,"children":676},{},[677],{"type":18,"value":678},"例如：",{"type":13,"tag":26,"props":680,"children":681},{},[682],{"type":13,"tag":132,"props":683,"children":686},{"alt":684,"src":685},"otopi_human_dialog_registerdialog","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_human_dialog_registerdialog.png?raw=true",[],{"type":13,"tag":26,"props":688,"children":689},{},[690],{"type":18,"value":691},"在context中，registerXXXX()都属于覆盖（registerPlugin、registerNotification除外），在完成覆盖后，由对应插件的子类来实现具体功能，如下：",{"type":13,"tag":57,"props":693,"children":695},{"code":694},"    def registerNotification(self, notification):\n        self._notifications.append(notification)\n\n    def registerPlugin(self, p):\n        self._plugins.append(p)\n\n    def registerDialog(self, dialog):\n        self._dialog = dialog\n\n    def registerServices(self, services):\n        self._services = services\n\n    def registerPackager(self, packager):\n        self._packager = packager\n\n    def registerCommand(self, command):\n        self._command = command\n",[696],{"type":13,"tag":62,"props":697,"children":698},{"__ignoreMap":7},[699],{"type":18,"value":694},{"type":13,"tag":26,"props":701,"children":702},{},[703,708],{"type":13,"tag":595,"props":704,"children":705},{},[706],{"type":18,"value":707},"运行阶段",{"type":18,"value":709},"分为三个步骤，加载插件、构建插件执行序列、按序列执行插件。",{"type":13,"tag":711,"props":712,"children":714},"h5",{"id":713},"加载插件",[715],{"type":18,"value":713},{"type":13,"tag":26,"props":717,"children":718},{},[719,723],{"type":13,"tag":595,"props":720,"children":721},{},[722],{"type":18,"value":713},{"type":18,"value":724},"的主要工作是根据BASE/pluginGroups指定的目标插件组(needgroups)，去BASE/pluginPath路径下寻找。",{"type":13,"tag":26,"props":726,"children":727},{},[728],{"type":18,"value":729},"在needgroups中，otopi会默认增加自己预定义的插件，即src/plugins/otopi目录。",{"type":13,"tag":26,"props":731,"children":732},{},[733],{"type":18,"value":734},"内置的插件共22个",{"type":13,"tag":26,"props":736,"children":737},{},[738],{"type":13,"tag":132,"props":739,"children":742},{"alt":740,"src":741},"default_plugin","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi_default_plugins.png?raw=true",[],{"type":13,"tag":26,"props":744,"children":745},{},[746],{"type":18,"value":747},"找到对应的Plugin中后会调用Util.loadModule来加载该python模块，并执行该模块的_ _ init__.py中的createPlugins方法，该方法中定义了模块路径下所有的plugin入口。",{"type":13,"tag":26,"props":749,"children":750},{},[751,753,757],{"type":18,"value":752},"所有定义的plugin都会继承PluginBase类，该类的_ _ init _ _ 方法中会调用registerPlugin，从而在context._plugins",{"type":13,"tag":754,"props":755,"children":756},"span",{},[],{"type":18,"value":758},"中保存了所有注册的plugins，这是第二步骤的输入。",{"type":13,"tag":711,"props":760,"children":762},{"id":761},"构建插件执行顺序",[763],{"type":18,"value":761},{"type":13,"tag":26,"props":765,"children":766},{},[767,772],{"type":13,"tag":595,"props":768,"children":769},{},[770],{"type":18,"value":771},"构建插件执行序列",{"type":18,"value":773},"的主要工作是根据@util.event中的before和after来构建一个有向无环图(toposort)。每个plugin都可以定义before和after两个变量，设定当前的plguin为current。",{"type":13,"tag":26,"props":775,"children":776},{},[777,779,784],{"type":18,"value":778},"根据注释中 ",{"type":13,"tag":595,"props":780,"children":781},{},[782],{"type":18,"value":783},"before=EVENTNAMESLIST -- place this event before the events with names EVENTNAMESLIST.",{"type":18,"value":785}," 的说明，那么可以产生(current,before)和(after,current)多个向量【经过分析代码验证相同】，通过全部插件的全部向量，我们可以绘制出多个有向无环图(需要错误检查)。同时使用prioty和stage两个参数来实现分组。",{"type":13,"tag":26,"props":787,"children":788},{},[789],{"type":18,"value":790},"下面随便寻找一个toposort group结果来示意下：",{"type":13,"tag":26,"props":792,"children":793},{},[794],{"type":18,"value":795},"执行构建的方法是 _toposortBuildSequence ，简单的理解就是先根据",{"type":13,"tag":57,"props":797,"children":799},{"code":798}," (current,before)\n (after,current)\n i.stage == j.stage && i.priority \u003C j.priority ? (i, j) : ( j , i )\n",[800],{"type":13,"tag":62,"props":801,"children":802},{"__ignoreMap":7},[803],{"type":18,"value":798},{"type":13,"tag":26,"props":805,"children":806},{},[807],{"type":18,"value":808},"来生成对应的向量，最后的结果如下图",{"type":13,"tag":26,"props":810,"children":811},{},[812],{"type":13,"tag":132,"props":813,"children":816},{"alt":814,"src":815},"deps_vector","https://github.com/ShaneDean/file/blob/master/blog/ovirt_engine_env/otopi__toposortBuildSequence_deps.png?raw=true",[],{"type":13,"tag":26,"props":818,"children":819},{},[820],{"type":18,"value":821},"挑一些标出来的向量，如",{"type":13,"tag":26,"props":823,"children":824},{},[825],{"type":18,"value":826},"红色 : (1,256) .  绿色 : (4, 73) .  蓝色 : (6,20) .",{"type":13,"tag":26,"props":828,"children":829},{},[830],{"type":18,"value":831},"这样的就有了一堆的经过检查的向量。下面的就是将这些已定义的向量进行拓扑排序。",{"type":13,"tag":26,"props":833,"children":834},{},[835,837],{"type":18,"value":836},"拓扑排序的方法是_toposort ， 算法学习详见",{"type":13,"tag":32,"props":838,"children":841},{"href":839,"rel":840},"http://note.youdao.com/noteshare?id=fc2dfe95bd2905d91185bafc91d7b149&sub=422857DAC7294892AD99F5E9A2D62326",[36],[842],{"type":18,"value":843},"这篇",{"type":13,"tag":711,"props":845,"children":847},{"id":846},"按序列执行插件",[848],{"type":18,"value":846},{"type":13,"tag":26,"props":850,"children":851},{},[852],{"type":18,"value":853},"排序后得到的结果是一个二维list，这里的stage就是otopi预定的18个阶段的枚举值，这里的method 包含了plugin主要信息的结构体（包含了每个插件的method和condition）",{"type":13,"tag":57,"props":855,"children":857},{"code":856},"[\n    {\n        stage0:[method0,method1,...]\n    },\n    {\n        stage1:[method0,method1,...]\n    },\n    ...\n]\n",[858],{"type":13,"tag":62,"props":859,"children":860},{"__ignoreMap":7},[861],{"type":18,"value":856},{"type":13,"tag":26,"props":863,"children":864},{},[865],{"type":18,"value":866},"然后就是按前面说的安装顺序依次执行method",{"type":13,"tag":26,"props":868,"children":869},{},[870],{"type":18,"value":871},"这里注意2点：",{"type":13,"tag":72,"props":873,"children":874},{},[875,880],{"type":13,"tag":76,"props":876,"children":877},{},[878],{"type":18,"value":879},"每次执行method的时候需要先执行condition，condition由定义plugin时候指定",{"type":13,"tag":76,"props":881,"children":882},{},[883],{"type":18,"value":884},"每次执行method前需要保存oldEnvironment，因为Plugin在执行的过程中有可能会修改Environment，需改的部分都会被dump到日志中。",{"type":13,"tag":266,"props":886,"children":888},{"id":887},"srcpluginsotopi",[889],{"type":18,"value":890},"src/plugins/otopi",{"type":13,"tag":26,"props":892,"children":893},{},[894],{"type":18,"value":895},"下面针对otopi提供的几个内置的plugin来进行分析。内容也会涉及部分ovirt-engine的setup脚本，下面内容不做区分。",{"type":13,"tag":26,"props":897,"children":898},{},[899],{"type":18,"value":900},"Stage_boot:",{"type":13,"tag":57,"props":902,"children":904},{"code":903},"根据environment定义dialog的模式（human/machine）\n注册一些信息到environment中，如包名、版本\n确定packager管理方式dnf/yum，默认推荐dnf\n//todo dnf和yum的代码逻辑 otopi.plugins.otopi.packagers.[dnfpackager/yumpackager]\n把密码设置为敏感字，在日志打印时候就会屏蔽不输出\n",[905],{"type":13,"tag":62,"props":906,"children":907},{"__ignoreMap":7},[908],{"type":18,"value":903},{"type":13,"tag":26,"props":910,"children":911},{},[912],{"type":18,"value":913},"Stage_init：",{"type":13,"tag":57,"props":915,"children":917},{"code":916},"找到所有需要解析的配置文件\notopi的初始化过程由每个Plugin执行对应的初始化来完成，如packager\\command\\transaction\n//todo transaction的代码逻辑 otopi.core.transaction\n初始化部分插件相关的environment，如cli/firewalld/iptables/ssh/clock/reboot/answerfile/hostile_service/selinux/fence_kdump_listener/db/java/....\n",[918],{"type":13,"tag":62,"props":919,"children":920},{"__ignoreMap":7},[921],{"type":18,"value":916},{"type":13,"tag":26,"props":923,"children":924},{},[925],{"type":18,"value":926},"Stage_setup",{"type":13,"tag":57,"props":928,"children":930},{"code":929},"检测关键命令是否存在，如ip/firewall-cmd/reboot/openssl.....\n计算系统的一些信息，如最大内存\n连接数据库\n",[931],{"type":13,"tag":62,"props":932,"children":933},{"__ignoreMap":7},[934],{"type":18,"value":929},{"type":13,"tag":26,"props":936,"children":937},{},[938],{"type":18,"value":939},"Stage_internal _packages",{"type":13,"tag":57,"props":941,"children":943},{"code":942},"//todo  trascation相关\n",[944],{"type":13,"tag":62,"props":945,"children":946},{"__ignoreMap":7},[947],{"type":18,"value":942},{"type":13,"tag":26,"props":949,"children":950},{},[951],{"type":18,"value":952},"Stage_programs",{"type":13,"tag":57,"props":954,"children":956},{"code":955},"在PATH路径下找对应的命令\n",[957],{"type":13,"tag":62,"props":958,"children":959},{"__ignoreMap":7},[960],{"type":18,"value":955},{"type":13,"tag":26,"props":962,"children":963},{},[964],{"type":18,"value":965},"Stage_late _setup",{"type":13,"tag":57,"props":967,"children":969},{"code":968},"nfs/websocket\n",[970],{"type":13,"tag":62,"props":971,"children":972},{"__ignoreMap":7},[973],{"type":18,"value":968},{"type":13,"tag":26,"props":975,"children":976},{},[977],{"type":18,"value":978},"Stage_customization",{"type":13,"tag":57,"props":980,"children":982},{"code":981},"解析conf文件定义的变量，并覆盖现有的变量\n使用command进行customization\n用户通过输入plugin接收的参数来控制产品的形态，并影响对应的environment，engine的产品configure阶段就是在这个阶段来整合。\n",[983],{"type":13,"tag":62,"props":984,"children":985},{"__ignoreMap":7},[986],{"type":18,"value":981},{"type":13,"tag":26,"props":988,"children":989},{},[990],{"type":18,"value":991},"Stage_validation",{"type":13,"tag":57,"props":993,"children":995},{"code":994},"检查写到Environment 里面的value的格式\n检查当前依赖的服务运行状态、系统信息、db权属、需要的文件和目录\n执行预写的脚本完成特定的任务，如taskcleaner\n",[996],{"type":13,"tag":62,"props":997,"children":998},{"__ignoreMap":7},[999],{"type":18,"value":994},{"type":13,"tag":26,"props":1001,"children":1002},{},[1003],{"type":18,"value":1004},"Stage_transaction _begin",{"type":13,"tag":57,"props":1006,"children":1008},{"code":1007},"fence_kdump_listener/websocket/notifier service\n//todo ?? \n",[1009],{"type":13,"tag":62,"props":1010,"children":1011},{"__ignoreMap":7},[1012],{"type":18,"value":1007},{"type":13,"tag":26,"props":1014,"children":1015},{},[1016],{"type":18,"value":1017},"Stage_early _misc",{"type":13,"tag":57,"props":1019,"children":1021},{"code":1020},"使用firewall-cmd重启服务\n//Fixing Engine database inconsistences\n",[1022],{"type":13,"tag":62,"props":1023,"children":1024},{"__ignoreMap":7},[1025],{"type":18,"value":1020},{"type":13,"tag":26,"props":1027,"children":1028},{},[1029],{"type":18,"value":1030},"Stage_packages",{"type":13,"tag":57,"props":1032,"children":1034},{"code":1033},"这里可以用来安装依赖的外部packages\n//yum/dnf -- processTransaction()  ??\n",[1035],{"type":13,"tag":62,"props":1036,"children":1037},{"__ignoreMap":7},[1038],{"type":18,"value":1033},{"type":13,"tag":26,"props":1040,"children":1041},{},[1042],{"type":18,"value":1043},"Stage_misc",{"type":13,"tag":57,"props":1045,"children":1047},{"code":1046},"使用filetransaction来完成文件操作\n生成CA证书、数据库初始化或升级\n把其他plugin的更新信息加入到数据中\n",[1048],{"type":13,"tag":62,"props":1049,"children":1050},{"__ignoreMap":7},[1051],{"type":18,"value":1046},{"type":13,"tag":26,"props":1053,"children":1054},{},[1055],{"type":18,"value":1056},"Stage_transaction _end",{"type":13,"tag":57,"props":1058,"children":1060},{"code":1059},"transaction.commit()\n",[1061],{"type":13,"tag":62,"props":1062,"children":1063},{"__ignoreMap":7},[1064],{"type":18,"value":1059},{"type":13,"tag":26,"props":1066,"children":1067},{},[1068],{"type":18,"value":1069},"Stage_closeup",{"type":13,"tag":57,"props":1071,"children":1073},{"code":1072},"启动或重启服务\n打印总结信息\n",[1074],{"type":13,"tag":62,"props":1075,"children":1076},{"__ignoreMap":7},[1077],{"type":18,"value":1072},{"type":13,"tag":26,"props":1079,"children":1080},{},[1081],{"type":18,"value":1082},"Stage_cleanup",{"type":13,"tag":57,"props":1084,"children":1086},{"code":1085},"显示日志路径、生成answer file\n",[1087],{"type":13,"tag":62,"props":1088,"children":1089},{"__ignoreMap":7},[1090],{"type":18,"value":1085},{"type":13,"tag":26,"props":1092,"children":1093},{},[1094],{"type":18,"value":1095},"Stage_pre _terminate",{"type":13,"tag":57,"props":1097,"children":1099},{"code":1098},"dump environment\n",[1100],{"type":13,"tag":62,"props":1101,"children":1102},{"__ignoreMap":7},[1103],{"type":18,"value":1098},{"type":13,"tag":26,"props":1105,"children":1106},{},[1107],{"type":18,"value":1108},"Stage_terminate",{"type":13,"tag":57,"props":1110,"children":1112},{"code":1111},"log/human/machine\n",[1113],{"type":13,"tag":62,"props":1114,"children":1115},{"__ignoreMap":7},[1116],{"type":18,"value":1111},{"type":13,"tag":26,"props":1118,"children":1119},{},[1120],{"type":18,"value":1121},"Stage_reboot",{"type":13,"tag":57,"props":1123,"children":1125},{"code":1124},"或许重启系统\n",[1126],{"type":13,"tag":62,"props":1127,"children":1128},{"__ignoreMap":7},[1129],{"type":18,"value":1124},{"title":7,"searchDepth":1131,"depth":1131,"links":1132},2,[1133,1134,1142],{"id":22,"depth":1131,"text":22},{"id":5,"depth":1131,"text":5,"children":1135},[1136,1138,1139,1140,1141],{"id":120,"depth":1137,"text":120},3,{"id":154,"depth":1137,"text":154},{"id":257,"depth":1137,"text":257},{"id":348,"depth":1137,"text":348},{"id":464,"depth":1137,"text":464},{"id":474,"depth":1131,"text":474,"children":1143},[1144,1145],{"id":499,"depth":1137,"text":499},{"id":517,"depth":1137,"text":517},"markdown","content:blog:otopi:analyze.md","content","blog/otopi/analyze.md","md",1718158598647]